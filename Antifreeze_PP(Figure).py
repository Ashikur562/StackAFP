{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hk_Ifbd6ojUE"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PAGIIwWXoz14",
        "outputId": "6afcfe51-6e54-4a6b-e7b4-0508a2dccdb5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting catboost\n",
            "  Downloading catboost-1.2-cp310-cp310-manylinux2014_x86_64.whl (98.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.6/98.6 MB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.24.3)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.5.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.10.1)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.13.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2022.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.0.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.11.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.39.3)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (23.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (8.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.0.9)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.2)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2\n"
          ]
        }
      ],
      "source": [
        "!pip install catboost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VA6VpUFso0Zd"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from catboost import CatBoostClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.ensemble import StackingClassifier\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score, cross_val_predict\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import auc, roc_curve\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u0UdsSdh5csr"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y1JE7flnpDOG",
        "outputId": "addb9005-1161-49f5-fb79-50bb156aa3e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        }
      ],
      "source": [
        "estimator = [('RF', RandomForestClassifier(n_estimators = 450, max_depth = 9)), ('XGB', XGBClassifier(n_estimators = 250,max_depth = 7, base_score = 0.1, use_label_encoder = False, eval_metric = 'mlogloss', learning_rate = 0.1)),\n",
        "             ('Cat', CatBoostClassifier(depth= 5, iterations = 45, learning_rate = 0.77)), ('LGBM', LGBMClassifier(learning_rate = 0.1,max_depth = 5,random_state = 75))]\n",
        "Stacking = StackingClassifier( estimators=estimator, final_estimator= RandomForestClassifier(n_estimators = 550, max_depth = 9))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m0JfGK52pSs3"
      },
      "outputs": [],
      "source": [
        "df1 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/FastText.csv')\n",
        "df2 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/Wor2Vec.csv')\n",
        "df3 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/doc2vec.csv')\n",
        "df4 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/LSA.csv')\n",
        "# df5 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/APAAC.csv')\n",
        "# df6 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/CTDT.csv')\n",
        "# df7 = pd.read_csv('/content/drive/MyDrive/Bioinformatics/Antifreeze PP/ASDC.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kS3DzbfgqAOO"
      },
      "outputs": [],
      "source": [
        "columns = df1.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "X1 = df1[columns]\n",
        "Y1 = df1[target]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JhG_6Pml5maZ"
      },
      "outputs": [],
      "source": [
        "sm = SMOTE(random_state = 42)\n",
        "X1, Y1 = sm.fit_resample(X1, Y1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "R4e9hrITqCk1"
      },
      "outputs": [],
      "source": [
        "columns = df2.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "X2 = df2[columns]\n",
        "Y2 = df2[target]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8GBnFsXO5pKp"
      },
      "outputs": [],
      "source": [
        "sm = SMOTE(random_state = 42)\n",
        "X2, Y2 = sm.fit_resample(X2, Y2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_GyaDTiQqGT1"
      },
      "outputs": [],
      "source": [
        "columns = df3.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "X3 = df3[columns]\n",
        "Y3 = df3[target]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "47LAKnMe5r4G"
      },
      "outputs": [],
      "source": [
        "sm = SMOTE(random_state = 42)\n",
        "X3, Y3 = sm.fit_resample(X3, Y3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4yDQ3Wf_qIvJ"
      },
      "outputs": [],
      "source": [
        "columns = df4.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "X4 = df4[columns]\n",
        "Y4 = df4[target]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4qTVT7xY5uKq"
      },
      "outputs": [],
      "source": [
        "sm = SMOTE(random_state = 42)\n",
        "X4, Y4 = sm.fit_resample(X4, Y4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v4wtwoTuqLGQ"
      },
      "outputs": [],
      "source": [
        "# columns = df5.columns.tolist()\n",
        "# # Filter the columns to remove data we do not want\n",
        "# columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# # Store the variable we are predicting\n",
        "# target = \"Target\"\n",
        "# X5 = df5[columns]\n",
        "# Y5 = df5[target]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Lq7U_OuH5wgx"
      },
      "outputs": [],
      "source": [
        "# sm = SMOTE(random_state = 42)\n",
        "# X5, Y5 = sm.fit_resample(X5, Y5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "byXQp3_TqP4v"
      },
      "outputs": [],
      "source": [
        "# cv = KFold(n_splits=10, random_state=1, shuffle=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n_-Gdd0bqRQE"
      },
      "outputs": [],
      "source": [
        "X_train1, X_test1, y_train1, y_test1 = train_test_split(X1, Y1, test_size= 0.3)\n",
        "X_train2, X_test2, y_train2, y_test2 = train_test_split(X2, Y2, test_size= 0.3)\n",
        "X_train3, X_test3, y_train3, y_test3 = train_test_split(X3, Y3, test_size= 0.3)\n",
        "X_train4, X_test4, y_train4, y_test4 = train_test_split(X4, Y4, test_size= 0.3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E4nLZa8lqTzV"
      },
      "outputs": [],
      "source": [
        "# for train_i, test_i in cv.split(X2):\n",
        "#     X_train2, X_test2 = X2.iloc[train_i], X2.iloc[test_i]\n",
        "#     y_train2, y_test2 = Y2.iloc[train_i], Y2.iloc[test_i]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RphaJjFTqV3N"
      },
      "outputs": [],
      "source": [
        "# for train_i, test_i in cv.split(X3):\n",
        "#     X_train3, X_test3 = X3.iloc[train_i], X3.iloc[test_i]\n",
        "#     y_train3, y_test3 = Y3.iloc[train_i], Y3.iloc[test_i]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MfzQfaNXqYWM"
      },
      "outputs": [],
      "source": [
        "# for train_i, test_i in cv.split(X4):\n",
        "#     X_train4, X_test4 = X4.iloc[train_i], X4.iloc[test_i]\n",
        "#     y_train4, y_test4 = Y4.iloc[train_i], Y4.iloc[test_i]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F5Wus7Q3qaX5"
      },
      "outputs": [],
      "source": [
        "# for train_i, test_i in cv.split(X5):\n",
        "#     X_train5, X_test5 = X5.iloc[train_i], X5.iloc[test_i]\n",
        "#     y_train5, y_test5 = Y5.iloc[train_i], Y5.iloc[test_i]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VYMFeGhDqfJd"
      },
      "outputs": [],
      "source": [
        "rfc=RandomForestClassifier(n_estimators = 450, max_depth = 9)\n",
        "xgb=XGBClassifier(n_estimators = 200,max_depth = 3, base_score = 0.1, eval_metric = 'mlogloss', learning_rate = 0.1)\n",
        "cat=CatBoostClassifier(depth= 5, iterations = 45, learning_rate = 0.77)\n",
        "lgb=LGBMClassifier(learning_rate = 0.09,max_depth = 5,random_state = 75)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "pZrBEHUMq0Pd",
        "outputId": "f5636a88-a8f8-4e0d-cc38-559027182014"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.5936016\ttotal: 175ms\tremaining: 7.7s\n",
            "1:\tlearn: 0.5437737\ttotal: 285ms\tremaining: 6.12s\n",
            "2:\tlearn: 0.5101186\ttotal: 387ms\tremaining: 5.41s\n",
            "3:\tlearn: 0.4771836\ttotal: 485ms\tremaining: 4.97s\n",
            "4:\tlearn: 0.4510385\ttotal: 580ms\tremaining: 4.64s\n",
            "5:\tlearn: 0.4354533\ttotal: 685ms\tremaining: 4.45s\n",
            "6:\tlearn: 0.4155939\ttotal: 795ms\tremaining: 4.32s\n",
            "7:\tlearn: 0.3961505\ttotal: 897ms\tremaining: 4.15s\n",
            "8:\tlearn: 0.3826387\ttotal: 994ms\tremaining: 3.98s\n",
            "9:\tlearn: 0.3659898\ttotal: 1.09s\tremaining: 3.83s\n",
            "10:\tlearn: 0.3540144\ttotal: 1.2s\tremaining: 3.7s\n",
            "11:\tlearn: 0.3369039\ttotal: 1.31s\tremaining: 3.6s\n",
            "12:\tlearn: 0.3243305\ttotal: 1.41s\tremaining: 3.46s\n",
            "13:\tlearn: 0.3093913\ttotal: 1.51s\tremaining: 3.35s\n",
            "14:\tlearn: 0.2953742\ttotal: 1.62s\tremaining: 3.23s\n",
            "15:\tlearn: 0.2811959\ttotal: 1.72s\tremaining: 3.13s\n",
            "16:\tlearn: 0.2680118\ttotal: 1.83s\tremaining: 3.02s\n",
            "17:\tlearn: 0.2546696\ttotal: 1.94s\tremaining: 2.9s\n",
            "18:\tlearn: 0.2438998\ttotal: 2.04s\tremaining: 2.79s\n",
            "19:\tlearn: 0.2327529\ttotal: 2.15s\tremaining: 2.68s\n",
            "20:\tlearn: 0.2223817\ttotal: 2.26s\tremaining: 2.58s\n",
            "21:\tlearn: 0.2116453\ttotal: 2.37s\tremaining: 2.48s\n",
            "22:\tlearn: 0.2019901\ttotal: 2.47s\tremaining: 2.37s\n",
            "23:\tlearn: 0.1925537\ttotal: 2.58s\tremaining: 2.26s\n",
            "24:\tlearn: 0.1842149\ttotal: 2.69s\tremaining: 2.15s\n",
            "25:\tlearn: 0.1755712\ttotal: 2.79s\tremaining: 2.04s\n",
            "26:\tlearn: 0.1676791\ttotal: 2.89s\tremaining: 1.93s\n",
            "27:\tlearn: 0.1594436\ttotal: 3s\tremaining: 1.82s\n",
            "28:\tlearn: 0.1524439\ttotal: 3.1s\tremaining: 1.71s\n",
            "29:\tlearn: 0.1452826\ttotal: 3.2s\tremaining: 1.6s\n",
            "30:\tlearn: 0.1391680\ttotal: 3.31s\tremaining: 1.5s\n",
            "31:\tlearn: 0.1327378\ttotal: 3.42s\tremaining: 1.39s\n",
            "32:\tlearn: 0.1262434\ttotal: 3.51s\tremaining: 1.28s\n",
            "33:\tlearn: 0.1203990\ttotal: 3.61s\tremaining: 1.17s\n",
            "34:\tlearn: 0.1149382\ttotal: 3.72s\tremaining: 1.06s\n",
            "35:\tlearn: 0.1100312\ttotal: 3.82s\tremaining: 955ms\n",
            "36:\tlearn: 0.1052158\ttotal: 3.93s\tremaining: 850ms\n",
            "37:\tlearn: 0.1002979\ttotal: 4.03s\tremaining: 743ms\n",
            "38:\tlearn: 0.0956829\ttotal: 4.13s\tremaining: 635ms\n",
            "39:\tlearn: 0.0913052\ttotal: 4.24s\tremaining: 530ms\n",
            "40:\tlearn: 0.0871067\ttotal: 4.35s\tremaining: 425ms\n",
            "41:\tlearn: 0.0832971\ttotal: 4.46s\tremaining: 319ms\n",
            "42:\tlearn: 0.0792471\ttotal: 4.55s\tremaining: 212ms\n",
            "43:\tlearn: 0.0754006\ttotal: 4.66s\tremaining: 106ms\n",
            "44:\tlearn: 0.0718115\ttotal: 4.77s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.5936016\ttotal: 123ms\tremaining: 5.41s\n",
            "1:\tlearn: 0.5437737\ttotal: 215ms\tremaining: 4.62s\n",
            "2:\tlearn: 0.5101186\ttotal: 314ms\tremaining: 4.39s\n",
            "3:\tlearn: 0.4771836\ttotal: 417ms\tremaining: 4.27s\n",
            "4:\tlearn: 0.4510385\ttotal: 511ms\tremaining: 4.08s\n",
            "5:\tlearn: 0.4354533\ttotal: 607ms\tremaining: 3.95s\n",
            "6:\tlearn: 0.4155939\ttotal: 714ms\tremaining: 3.88s\n",
            "7:\tlearn: 0.3961505\ttotal: 816ms\tremaining: 3.77s\n",
            "8:\tlearn: 0.3826387\ttotal: 926ms\tremaining: 3.7s\n",
            "9:\tlearn: 0.3659898\ttotal: 1.04s\tremaining: 3.63s\n",
            "10:\tlearn: 0.3540144\ttotal: 1.14s\tremaining: 3.52s\n",
            "11:\tlearn: 0.3369039\ttotal: 1.24s\tremaining: 3.4s\n",
            "12:\tlearn: 0.3243305\ttotal: 1.33s\tremaining: 3.28s\n",
            "13:\tlearn: 0.3093913\ttotal: 1.45s\tremaining: 3.2s\n",
            "14:\tlearn: 0.2953742\ttotal: 1.54s\tremaining: 3.08s\n",
            "15:\tlearn: 0.2811959\ttotal: 1.64s\tremaining: 2.97s\n",
            "16:\tlearn: 0.2680118\ttotal: 1.75s\tremaining: 2.88s\n",
            "17:\tlearn: 0.2546696\ttotal: 1.86s\tremaining: 2.79s\n",
            "18:\tlearn: 0.2438998\ttotal: 1.97s\tremaining: 2.69s\n",
            "19:\tlearn: 0.2327529\ttotal: 2.06s\tremaining: 2.58s\n",
            "20:\tlearn: 0.2223817\ttotal: 2.17s\tremaining: 2.48s\n",
            "21:\tlearn: 0.2116453\ttotal: 2.28s\tremaining: 2.38s\n",
            "22:\tlearn: 0.2019901\ttotal: 2.38s\tremaining: 2.28s\n",
            "23:\tlearn: 0.1925537\ttotal: 2.48s\tremaining: 2.17s\n",
            "24:\tlearn: 0.1842149\ttotal: 2.58s\tremaining: 2.06s\n",
            "25:\tlearn: 0.1755712\ttotal: 2.68s\tremaining: 1.96s\n",
            "26:\tlearn: 0.1676791\ttotal: 2.78s\tremaining: 1.86s\n",
            "27:\tlearn: 0.1594436\ttotal: 2.89s\tremaining: 1.75s\n",
            "28:\tlearn: 0.1524439\ttotal: 3s\tremaining: 1.66s\n",
            "29:\tlearn: 0.1452826\ttotal: 3.1s\tremaining: 1.55s\n",
            "30:\tlearn: 0.1391680\ttotal: 3.2s\tremaining: 1.44s\n",
            "31:\tlearn: 0.1327378\ttotal: 3.3s\tremaining: 1.34s\n",
            "32:\tlearn: 0.1262434\ttotal: 3.39s\tremaining: 1.23s\n",
            "33:\tlearn: 0.1203990\ttotal: 3.5s\tremaining: 1.13s\n",
            "34:\tlearn: 0.1149382\ttotal: 3.6s\tremaining: 1.03s\n",
            "35:\tlearn: 0.1100312\ttotal: 3.71s\tremaining: 927ms\n",
            "36:\tlearn: 0.1052158\ttotal: 3.81s\tremaining: 824ms\n",
            "37:\tlearn: 0.1002979\ttotal: 3.92s\tremaining: 722ms\n",
            "38:\tlearn: 0.0956829\ttotal: 4.03s\tremaining: 620ms\n",
            "39:\tlearn: 0.0913052\ttotal: 4.13s\tremaining: 517ms\n",
            "40:\tlearn: 0.0871067\ttotal: 4.23s\tremaining: 413ms\n",
            "41:\tlearn: 0.0832971\ttotal: 4.34s\tremaining: 310ms\n",
            "42:\tlearn: 0.0792471\ttotal: 4.45s\tremaining: 207ms\n",
            "43:\tlearn: 0.0754006\ttotal: 4.54s\tremaining: 103ms\n",
            "44:\tlearn: 0.0718115\ttotal: 4.64s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.5944804\ttotal: 122ms\tremaining: 5.37s\n",
            "1:\tlearn: 0.5413333\ttotal: 232ms\tremaining: 5s\n",
            "2:\tlearn: 0.5066692\ttotal: 337ms\tremaining: 4.72s\n",
            "3:\tlearn: 0.4801288\ttotal: 432ms\tremaining: 4.42s\n",
            "4:\tlearn: 0.4557299\ttotal: 526ms\tremaining: 4.21s\n",
            "5:\tlearn: 0.4394089\ttotal: 628ms\tremaining: 4.08s\n",
            "6:\tlearn: 0.4206848\ttotal: 732ms\tremaining: 3.98s\n",
            "7:\tlearn: 0.3994739\ttotal: 832ms\tremaining: 3.85s\n",
            "8:\tlearn: 0.3812108\ttotal: 937ms\tremaining: 3.75s\n",
            "9:\tlearn: 0.3654177\ttotal: 1.03s\tremaining: 3.61s\n",
            "10:\tlearn: 0.3500805\ttotal: 1.13s\tremaining: 3.49s\n",
            "11:\tlearn: 0.3361210\ttotal: 1.24s\tremaining: 3.42s\n",
            "12:\tlearn: 0.3192899\ttotal: 1.35s\tremaining: 3.32s\n",
            "13:\tlearn: 0.3032961\ttotal: 1.45s\tremaining: 3.22s\n",
            "14:\tlearn: 0.2893234\ttotal: 1.57s\tremaining: 3.13s\n",
            "15:\tlearn: 0.2716406\ttotal: 1.68s\tremaining: 3.04s\n",
            "16:\tlearn: 0.2593722\ttotal: 1.78s\tremaining: 2.93s\n",
            "17:\tlearn: 0.2438954\ttotal: 1.89s\tremaining: 2.83s\n",
            "18:\tlearn: 0.2333852\ttotal: 2s\tremaining: 2.73s\n",
            "19:\tlearn: 0.2213464\ttotal: 2.09s\tremaining: 2.62s\n",
            "20:\tlearn: 0.2101817\ttotal: 2.19s\tremaining: 2.5s\n",
            "21:\tlearn: 0.2002025\ttotal: 2.31s\tremaining: 2.42s\n",
            "22:\tlearn: 0.1920696\ttotal: 2.41s\tremaining: 2.3s\n",
            "23:\tlearn: 0.1822024\ttotal: 2.5s\tremaining: 2.19s\n",
            "24:\tlearn: 0.1722512\ttotal: 2.61s\tremaining: 2.09s\n",
            "25:\tlearn: 0.1632823\ttotal: 2.72s\tremaining: 1.99s\n",
            "26:\tlearn: 0.1543642\ttotal: 2.83s\tremaining: 1.89s\n",
            "27:\tlearn: 0.1463186\ttotal: 2.93s\tremaining: 1.78s\n",
            "28:\tlearn: 0.1399203\ttotal: 3.03s\tremaining: 1.67s\n",
            "29:\tlearn: 0.1323902\ttotal: 3.13s\tremaining: 1.56s\n",
            "30:\tlearn: 0.1266732\ttotal: 3.22s\tremaining: 1.46s\n",
            "31:\tlearn: 0.1220241\ttotal: 3.34s\tremaining: 1.35s\n",
            "32:\tlearn: 0.1158558\ttotal: 3.44s\tremaining: 1.25s\n",
            "33:\tlearn: 0.1099938\ttotal: 3.53s\tremaining: 1.14s\n",
            "34:\tlearn: 0.1033112\ttotal: 3.67s\tremaining: 1.05s\n",
            "35:\tlearn: 0.0985052\ttotal: 3.77s\tremaining: 942ms\n",
            "36:\tlearn: 0.0927836\ttotal: 3.87s\tremaining: 837ms\n",
            "37:\tlearn: 0.0884403\ttotal: 3.97s\tremaining: 732ms\n",
            "38:\tlearn: 0.0841202\ttotal: 4.08s\tremaining: 628ms\n",
            "39:\tlearn: 0.0797754\ttotal: 4.18s\tremaining: 522ms\n",
            "40:\tlearn: 0.0760809\ttotal: 4.28s\tremaining: 417ms\n",
            "41:\tlearn: 0.0725907\ttotal: 4.4s\tremaining: 314ms\n",
            "42:\tlearn: 0.0701303\ttotal: 4.49s\tremaining: 209ms\n",
            "43:\tlearn: 0.0666373\ttotal: 4.6s\tremaining: 105ms\n",
            "44:\tlearn: 0.0634784\ttotal: 4.7s\tremaining: 0us\n",
            "0:\tlearn: 0.5945707\ttotal: 226ms\tremaining: 9.94s\n",
            "1:\tlearn: 0.5355740\ttotal: 419ms\tremaining: 9.01s\n",
            "2:\tlearn: 0.4970355\ttotal: 617ms\tremaining: 8.64s\n",
            "3:\tlearn: 0.4692271\ttotal: 831ms\tremaining: 8.52s\n",
            "4:\tlearn: 0.4445977\ttotal: 1.03s\tremaining: 8.24s\n",
            "5:\tlearn: 0.4206497\ttotal: 1.21s\tremaining: 7.84s\n",
            "6:\tlearn: 0.4029050\ttotal: 1.43s\tremaining: 7.75s\n",
            "7:\tlearn: 0.3875814\ttotal: 1.62s\tremaining: 7.5s\n",
            "8:\tlearn: 0.3726485\ttotal: 1.82s\tremaining: 7.28s\n",
            "9:\tlearn: 0.3581616\ttotal: 2.02s\tremaining: 7.07s\n",
            "10:\tlearn: 0.3454924\ttotal: 2.24s\tremaining: 6.91s\n",
            "11:\tlearn: 0.3280128\ttotal: 2.44s\tremaining: 6.71s\n",
            "12:\tlearn: 0.3125353\ttotal: 2.64s\tremaining: 6.49s\n",
            "13:\tlearn: 0.2956091\ttotal: 2.85s\tremaining: 6.3s\n",
            "14:\tlearn: 0.2816417\ttotal: 3.06s\tremaining: 6.12s\n",
            "15:\tlearn: 0.2656666\ttotal: 3.28s\tremaining: 5.94s\n",
            "16:\tlearn: 0.2529672\ttotal: 3.46s\tremaining: 5.7s\n",
            "17:\tlearn: 0.2405444\ttotal: 3.66s\tremaining: 5.48s\n",
            "18:\tlearn: 0.2272196\ttotal: 3.87s\tremaining: 5.29s\n",
            "19:\tlearn: 0.2151768\ttotal: 4.1s\tremaining: 5.13s\n",
            "20:\tlearn: 0.2042638\ttotal: 4.31s\tremaining: 4.93s\n",
            "21:\tlearn: 0.1940557\ttotal: 4.53s\tremaining: 4.73s\n",
            "22:\tlearn: 0.1838007\ttotal: 4.73s\tremaining: 4.52s\n",
            "23:\tlearn: 0.1758133\ttotal: 4.93s\tremaining: 4.31s\n",
            "24:\tlearn: 0.1675989\ttotal: 5.13s\tremaining: 4.1s\n",
            "25:\tlearn: 0.1597758\ttotal: 5.33s\tremaining: 3.9s\n",
            "26:\tlearn: 0.1513849\ttotal: 5.53s\tremaining: 3.68s\n",
            "27:\tlearn: 0.1438653\ttotal: 5.72s\tremaining: 3.47s\n",
            "28:\tlearn: 0.1371251\ttotal: 5.93s\tremaining: 3.27s\n",
            "29:\tlearn: 0.1304677\ttotal: 6.15s\tremaining: 3.08s\n",
            "30:\tlearn: 0.1232857\ttotal: 6.33s\tremaining: 2.86s\n",
            "31:\tlearn: 0.1169005\ttotal: 6.44s\tremaining: 2.62s\n",
            "32:\tlearn: 0.1119648\ttotal: 6.54s\tremaining: 2.38s\n",
            "33:\tlearn: 0.1067974\ttotal: 6.63s\tremaining: 2.15s\n",
            "34:\tlearn: 0.1015831\ttotal: 6.73s\tremaining: 1.92s\n",
            "35:\tlearn: 0.0972153\ttotal: 6.83s\tremaining: 1.71s\n",
            "36:\tlearn: 0.0930607\ttotal: 6.92s\tremaining: 1.5s\n",
            "37:\tlearn: 0.0879601\ttotal: 7.02s\tremaining: 1.29s\n",
            "38:\tlearn: 0.0837273\ttotal: 7.12s\tremaining: 1.09s\n",
            "39:\tlearn: 0.0793266\ttotal: 7.24s\tremaining: 905ms\n",
            "40:\tlearn: 0.0753286\ttotal: 7.34s\tremaining: 716ms\n",
            "41:\tlearn: 0.0716345\ttotal: 7.43s\tremaining: 531ms\n",
            "42:\tlearn: 0.0682803\ttotal: 7.53s\tremaining: 350ms\n",
            "43:\tlearn: 0.0648344\ttotal: 7.63s\tremaining: 173ms\n",
            "44:\tlearn: 0.0611759\ttotal: 7.73s\tremaining: 0us\n",
            "0:\tlearn: 0.5988710\ttotal: 126ms\tremaining: 5.55s\n",
            "1:\tlearn: 0.5505624\ttotal: 226ms\tremaining: 4.85s\n",
            "2:\tlearn: 0.5153710\ttotal: 319ms\tremaining: 4.47s\n",
            "3:\tlearn: 0.4905045\ttotal: 423ms\tremaining: 4.34s\n",
            "4:\tlearn: 0.4680275\ttotal: 522ms\tremaining: 4.17s\n",
            "5:\tlearn: 0.4465999\ttotal: 623ms\tremaining: 4.05s\n",
            "6:\tlearn: 0.4280456\ttotal: 721ms\tremaining: 3.91s\n",
            "7:\tlearn: 0.4102636\ttotal: 833ms\tremaining: 3.85s\n",
            "8:\tlearn: 0.3941715\ttotal: 938ms\tremaining: 3.75s\n",
            "9:\tlearn: 0.3758881\ttotal: 1.03s\tremaining: 3.62s\n",
            "10:\tlearn: 0.3609691\ttotal: 1.13s\tremaining: 3.49s\n",
            "11:\tlearn: 0.3457444\ttotal: 1.23s\tremaining: 3.37s\n",
            "12:\tlearn: 0.3313010\ttotal: 1.32s\tremaining: 3.26s\n",
            "13:\tlearn: 0.3153201\ttotal: 1.42s\tremaining: 3.14s\n",
            "14:\tlearn: 0.2983579\ttotal: 1.52s\tremaining: 3.04s\n",
            "15:\tlearn: 0.2835760\ttotal: 1.62s\tremaining: 2.93s\n",
            "16:\tlearn: 0.2704864\ttotal: 1.72s\tremaining: 2.83s\n",
            "17:\tlearn: 0.2554103\ttotal: 1.83s\tremaining: 2.74s\n",
            "18:\tlearn: 0.2411686\ttotal: 1.94s\tremaining: 2.65s\n",
            "19:\tlearn: 0.2297086\ttotal: 2.04s\tremaining: 2.55s\n",
            "20:\tlearn: 0.2183813\ttotal: 2.14s\tremaining: 2.44s\n",
            "21:\tlearn: 0.2083243\ttotal: 2.25s\tremaining: 2.35s\n",
            "22:\tlearn: 0.1981783\ttotal: 2.36s\tremaining: 2.25s\n",
            "23:\tlearn: 0.1893935\ttotal: 2.46s\tremaining: 2.15s\n",
            "24:\tlearn: 0.1801905\ttotal: 2.56s\tremaining: 2.04s\n",
            "25:\tlearn: 0.1707332\ttotal: 2.67s\tremaining: 1.95s\n",
            "26:\tlearn: 0.1631370\ttotal: 2.77s\tremaining: 1.84s\n",
            "27:\tlearn: 0.1550739\ttotal: 2.87s\tremaining: 1.74s\n",
            "28:\tlearn: 0.1477807\ttotal: 2.99s\tremaining: 1.65s\n",
            "29:\tlearn: 0.1413417\ttotal: 3.11s\tremaining: 1.55s\n",
            "30:\tlearn: 0.1346407\ttotal: 3.21s\tremaining: 1.45s\n",
            "31:\tlearn: 0.1291335\ttotal: 3.3s\tremaining: 1.34s\n",
            "32:\tlearn: 0.1231209\ttotal: 3.41s\tremaining: 1.24s\n",
            "33:\tlearn: 0.1161446\ttotal: 3.51s\tremaining: 1.14s\n",
            "34:\tlearn: 0.1103851\ttotal: 3.62s\tremaining: 1.03s\n",
            "35:\tlearn: 0.1040235\ttotal: 3.73s\tremaining: 933ms\n",
            "36:\tlearn: 0.0983109\ttotal: 3.84s\tremaining: 830ms\n",
            "37:\tlearn: 0.0944253\ttotal: 3.97s\tremaining: 731ms\n",
            "38:\tlearn: 0.0899791\ttotal: 4.07s\tremaining: 627ms\n",
            "39:\tlearn: 0.0853497\ttotal: 4.17s\tremaining: 521ms\n",
            "40:\tlearn: 0.0811594\ttotal: 4.27s\tremaining: 416ms\n",
            "41:\tlearn: 0.0766364\ttotal: 4.38s\tremaining: 313ms\n",
            "42:\tlearn: 0.0727533\ttotal: 4.48s\tremaining: 208ms\n",
            "43:\tlearn: 0.0692063\ttotal: 4.58s\tremaining: 104ms\n",
            "44:\tlearn: 0.0658533\ttotal: 4.7s\tremaining: 0us\n",
            "0:\tlearn: 0.6016736\ttotal: 128ms\tremaining: 5.63s\n",
            "1:\tlearn: 0.5431846\ttotal: 228ms\tremaining: 4.89s\n",
            "2:\tlearn: 0.5026214\ttotal: 325ms\tremaining: 4.56s\n",
            "3:\tlearn: 0.4739643\ttotal: 426ms\tremaining: 4.37s\n",
            "4:\tlearn: 0.4489065\ttotal: 537ms\tremaining: 4.3s\n",
            "5:\tlearn: 0.4298617\ttotal: 645ms\tremaining: 4.19s\n",
            "6:\tlearn: 0.4105721\ttotal: 744ms\tremaining: 4.04s\n",
            "7:\tlearn: 0.3909899\ttotal: 842ms\tremaining: 3.9s\n",
            "8:\tlearn: 0.3729828\ttotal: 954ms\tremaining: 3.82s\n",
            "9:\tlearn: 0.3580367\ttotal: 1.05s\tremaining: 3.69s\n",
            "10:\tlearn: 0.3449624\ttotal: 1.17s\tremaining: 3.6s\n",
            "11:\tlearn: 0.3311887\ttotal: 1.26s\tremaining: 3.48s\n",
            "12:\tlearn: 0.3151149\ttotal: 1.37s\tremaining: 3.37s\n",
            "13:\tlearn: 0.3007860\ttotal: 1.47s\tremaining: 3.26s\n",
            "14:\tlearn: 0.2853441\ttotal: 1.58s\tremaining: 3.17s\n",
            "15:\tlearn: 0.2710362\ttotal: 1.69s\tremaining: 3.06s\n",
            "16:\tlearn: 0.2561812\ttotal: 1.79s\tremaining: 2.95s\n",
            "17:\tlearn: 0.2429843\ttotal: 1.9s\tremaining: 2.84s\n",
            "18:\tlearn: 0.2320437\ttotal: 2s\tremaining: 2.73s\n",
            "19:\tlearn: 0.2202785\ttotal: 2.11s\tremaining: 2.63s\n",
            "20:\tlearn: 0.2096690\ttotal: 2.21s\tremaining: 2.53s\n",
            "21:\tlearn: 0.1996990\ttotal: 2.31s\tremaining: 2.42s\n",
            "22:\tlearn: 0.1901267\ttotal: 2.45s\tremaining: 2.34s\n",
            "23:\tlearn: 0.1799920\ttotal: 2.62s\tremaining: 2.29s\n",
            "24:\tlearn: 0.1709597\ttotal: 2.84s\tremaining: 2.27s\n",
            "25:\tlearn: 0.1610654\ttotal: 3.04s\tremaining: 2.22s\n",
            "26:\tlearn: 0.1533985\ttotal: 3.24s\tremaining: 2.16s\n",
            "27:\tlearn: 0.1467188\ttotal: 3.43s\tremaining: 2.08s\n",
            "28:\tlearn: 0.1393954\ttotal: 3.63s\tremaining: 2s\n",
            "29:\tlearn: 0.1335272\ttotal: 3.81s\tremaining: 1.91s\n",
            "30:\tlearn: 0.1280620\ttotal: 4.03s\tremaining: 1.82s\n",
            "31:\tlearn: 0.1220713\ttotal: 4.23s\tremaining: 1.72s\n",
            "32:\tlearn: 0.1161313\ttotal: 4.42s\tremaining: 1.61s\n",
            "33:\tlearn: 0.1100976\ttotal: 4.62s\tremaining: 1.49s\n",
            "34:\tlearn: 0.1050759\ttotal: 4.84s\tremaining: 1.38s\n",
            "35:\tlearn: 0.1003029\ttotal: 5.06s\tremaining: 1.26s\n",
            "36:\tlearn: 0.0961951\ttotal: 5.27s\tremaining: 1.14s\n",
            "37:\tlearn: 0.0918156\ttotal: 5.48s\tremaining: 1.01s\n",
            "38:\tlearn: 0.0872377\ttotal: 5.68s\tremaining: 875ms\n",
            "39:\tlearn: 0.0829324\ttotal: 5.88s\tremaining: 736ms\n",
            "40:\tlearn: 0.0792575\ttotal: 6.08s\tremaining: 593ms\n",
            "41:\tlearn: 0.0753868\ttotal: 6.28s\tremaining: 449ms\n",
            "42:\tlearn: 0.0718009\ttotal: 6.47s\tremaining: 301ms\n",
            "43:\tlearn: 0.0684149\ttotal: 6.67s\tremaining: 151ms\n",
            "44:\tlearn: 0.0649064\ttotal: 6.88s\tremaining: 0us\n",
            "0:\tlearn: 0.6017912\ttotal: 217ms\tremaining: 9.54s\n",
            "1:\tlearn: 0.5459675\ttotal: 415ms\tremaining: 8.92s\n",
            "2:\tlearn: 0.5073518\ttotal: 529ms\tremaining: 7.41s\n",
            "3:\tlearn: 0.4790699\ttotal: 629ms\tremaining: 6.45s\n",
            "4:\tlearn: 0.4574793\ttotal: 727ms\tremaining: 5.81s\n",
            "5:\tlearn: 0.4354655\ttotal: 823ms\tremaining: 5.35s\n",
            "6:\tlearn: 0.4157982\ttotal: 921ms\tremaining: 5s\n",
            "7:\tlearn: 0.3953800\ttotal: 1.01s\tremaining: 4.7s\n",
            "8:\tlearn: 0.3773765\ttotal: 1.12s\tremaining: 4.47s\n",
            "9:\tlearn: 0.3629231\ttotal: 1.21s\tremaining: 4.24s\n",
            "10:\tlearn: 0.3461643\ttotal: 1.32s\tremaining: 4.09s\n",
            "11:\tlearn: 0.3287167\ttotal: 1.42s\tremaining: 3.9s\n",
            "12:\tlearn: 0.3126901\ttotal: 1.53s\tremaining: 3.77s\n",
            "13:\tlearn: 0.2967109\ttotal: 1.63s\tremaining: 3.61s\n",
            "14:\tlearn: 0.2820959\ttotal: 1.73s\tremaining: 3.46s\n",
            "15:\tlearn: 0.2681010\ttotal: 1.83s\tremaining: 3.32s\n",
            "16:\tlearn: 0.2520412\ttotal: 1.93s\tremaining: 3.18s\n",
            "17:\tlearn: 0.2386789\ttotal: 2.03s\tremaining: 3.04s\n",
            "18:\tlearn: 0.2255498\ttotal: 2.13s\tremaining: 2.92s\n",
            "19:\tlearn: 0.2168835\ttotal: 2.22s\tremaining: 2.78s\n",
            "20:\tlearn: 0.2062825\ttotal: 2.32s\tremaining: 2.65s\n",
            "21:\tlearn: 0.1962405\ttotal: 2.42s\tremaining: 2.53s\n",
            "22:\tlearn: 0.1864730\ttotal: 2.53s\tremaining: 2.42s\n",
            "23:\tlearn: 0.1760742\ttotal: 2.63s\tremaining: 2.31s\n",
            "24:\tlearn: 0.1671718\ttotal: 2.73s\tremaining: 2.18s\n",
            "25:\tlearn: 0.1584133\ttotal: 2.82s\tremaining: 2.06s\n",
            "26:\tlearn: 0.1505224\ttotal: 2.93s\tremaining: 1.95s\n",
            "27:\tlearn: 0.1430884\ttotal: 3.02s\tremaining: 1.83s\n",
            "28:\tlearn: 0.1369323\ttotal: 3.11s\tremaining: 1.72s\n",
            "29:\tlearn: 0.1300386\ttotal: 3.21s\tremaining: 1.61s\n",
            "30:\tlearn: 0.1230322\ttotal: 3.31s\tremaining: 1.49s\n",
            "31:\tlearn: 0.1171592\ttotal: 3.4s\tremaining: 1.38s\n",
            "32:\tlearn: 0.1117594\ttotal: 3.51s\tremaining: 1.27s\n",
            "33:\tlearn: 0.1056923\ttotal: 3.62s\tremaining: 1.17s\n",
            "34:\tlearn: 0.0997744\ttotal: 3.73s\tremaining: 1.06s\n",
            "35:\tlearn: 0.0951095\ttotal: 3.82s\tremaining: 956ms\n",
            "36:\tlearn: 0.0900021\ttotal: 3.92s\tremaining: 848ms\n",
            "37:\tlearn: 0.0856077\ttotal: 4.02s\tremaining: 740ms\n",
            "38:\tlearn: 0.0812618\ttotal: 4.12s\tremaining: 634ms\n",
            "39:\tlearn: 0.0769330\ttotal: 4.23s\tremaining: 529ms\n",
            "40:\tlearn: 0.0734484\ttotal: 4.33s\tremaining: 423ms\n",
            "41:\tlearn: 0.0695123\ttotal: 4.43s\tremaining: 316ms\n",
            "42:\tlearn: 0.0656692\ttotal: 4.53s\tremaining: 211ms\n",
            "43:\tlearn: 0.0625555\ttotal: 4.64s\tremaining: 106ms\n",
            "44:\tlearn: 0.0593965\ttotal: 4.75s\tremaining: 0us\n",
            "0:\tlearn: 0.6236526\ttotal: 227ms\tremaining: 9.97s\n",
            "1:\tlearn: 0.5676332\ttotal: 405ms\tremaining: 8.72s\n",
            "2:\tlearn: 0.5253471\ttotal: 589ms\tremaining: 8.24s\n",
            "3:\tlearn: 0.4834046\ttotal: 771ms\tremaining: 7.9s\n",
            "4:\tlearn: 0.4496278\ttotal: 938ms\tremaining: 7.5s\n",
            "5:\tlearn: 0.4247123\ttotal: 1.11s\tremaining: 7.24s\n",
            "6:\tlearn: 0.3989840\ttotal: 1.29s\tremaining: 7.01s\n",
            "7:\tlearn: 0.3757674\ttotal: 1.45s\tremaining: 6.7s\n",
            "8:\tlearn: 0.3563347\ttotal: 1.63s\tremaining: 6.53s\n",
            "9:\tlearn: 0.3330700\ttotal: 1.81s\tremaining: 6.35s\n",
            "10:\tlearn: 0.3160991\ttotal: 2.01s\tremaining: 6.21s\n",
            "11:\tlearn: 0.2982930\ttotal: 2.19s\tremaining: 6.01s\n",
            "12:\tlearn: 0.2806046\ttotal: 2.37s\tremaining: 5.84s\n",
            "13:\tlearn: 0.2645727\ttotal: 2.56s\tremaining: 5.66s\n",
            "14:\tlearn: 0.2507797\ttotal: 2.73s\tremaining: 5.47s\n",
            "15:\tlearn: 0.2385700\ttotal: 2.89s\tremaining: 5.24s\n",
            "16:\tlearn: 0.2235640\ttotal: 3.08s\tremaining: 5.08s\n",
            "17:\tlearn: 0.2120471\ttotal: 3.27s\tremaining: 4.9s\n",
            "18:\tlearn: 0.2020640\ttotal: 3.45s\tremaining: 4.72s\n",
            "19:\tlearn: 0.1912187\ttotal: 3.63s\tremaining: 4.54s\n",
            "20:\tlearn: 0.1813434\ttotal: 3.82s\tremaining: 4.37s\n",
            "21:\tlearn: 0.1731740\ttotal: 4.01s\tremaining: 4.19s\n",
            "22:\tlearn: 0.1642635\ttotal: 4.2s\tremaining: 4.01s\n",
            "23:\tlearn: 0.1558291\ttotal: 4.37s\tremaining: 3.82s\n",
            "24:\tlearn: 0.1486557\ttotal: 4.52s\tremaining: 3.62s\n",
            "25:\tlearn: 0.1417194\ttotal: 4.71s\tremaining: 3.44s\n",
            "26:\tlearn: 0.1345588\ttotal: 4.88s\tremaining: 3.25s\n",
            "27:\tlearn: 0.1297479\ttotal: 4.98s\tremaining: 3.02s\n",
            "28:\tlearn: 0.1251834\ttotal: 5.07s\tremaining: 2.8s\n",
            "29:\tlearn: 0.1208386\ttotal: 5.16s\tremaining: 2.58s\n",
            "30:\tlearn: 0.1171829\ttotal: 5.25s\tremaining: 2.37s\n",
            "31:\tlearn: 0.1127343\ttotal: 5.34s\tremaining: 2.17s\n",
            "32:\tlearn: 0.1071382\ttotal: 5.44s\tremaining: 1.98s\n",
            "33:\tlearn: 0.1034865\ttotal: 5.54s\tremaining: 1.79s\n",
            "34:\tlearn: 0.0994709\ttotal: 5.63s\tremaining: 1.61s\n",
            "35:\tlearn: 0.0950118\ttotal: 5.73s\tremaining: 1.43s\n",
            "36:\tlearn: 0.0903356\ttotal: 5.83s\tremaining: 1.26s\n",
            "37:\tlearn: 0.0874872\ttotal: 5.93s\tremaining: 1.09s\n",
            "38:\tlearn: 0.0830758\ttotal: 6.03s\tremaining: 927ms\n",
            "39:\tlearn: 0.0789231\ttotal: 6.12s\tremaining: 765ms\n",
            "40:\tlearn: 0.0765333\ttotal: 6.21s\tremaining: 606ms\n",
            "41:\tlearn: 0.0739415\ttotal: 6.31s\tremaining: 450ms\n",
            "42:\tlearn: 0.0715488\ttotal: 6.4s\tremaining: 298ms\n",
            "43:\tlearn: 0.0703051\ttotal: 6.49s\tremaining: 148ms\n",
            "44:\tlearn: 0.0680884\ttotal: 6.6s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.6236526\ttotal: 116ms\tremaining: 5.12s\n",
            "1:\tlearn: 0.5676332\ttotal: 210ms\tremaining: 4.51s\n",
            "2:\tlearn: 0.5253471\ttotal: 301ms\tremaining: 4.22s\n",
            "3:\tlearn: 0.4834046\ttotal: 398ms\tremaining: 4.08s\n",
            "4:\tlearn: 0.4496278\ttotal: 487ms\tremaining: 3.9s\n",
            "5:\tlearn: 0.4247123\ttotal: 593ms\tremaining: 3.86s\n",
            "6:\tlearn: 0.3989840\ttotal: 686ms\tremaining: 3.73s\n",
            "7:\tlearn: 0.3757674\ttotal: 778ms\tremaining: 3.6s\n",
            "8:\tlearn: 0.3563347\ttotal: 866ms\tremaining: 3.46s\n",
            "9:\tlearn: 0.3330700\ttotal: 968ms\tremaining: 3.39s\n",
            "10:\tlearn: 0.3160991\ttotal: 1.06s\tremaining: 3.27s\n",
            "11:\tlearn: 0.2982930\ttotal: 1.15s\tremaining: 3.16s\n",
            "12:\tlearn: 0.2806046\ttotal: 1.24s\tremaining: 3.06s\n",
            "13:\tlearn: 0.2645727\ttotal: 1.33s\tremaining: 2.96s\n",
            "14:\tlearn: 0.2507797\ttotal: 1.44s\tremaining: 2.87s\n",
            "15:\tlearn: 0.2385700\ttotal: 1.53s\tremaining: 2.77s\n",
            "16:\tlearn: 0.2235640\ttotal: 1.64s\tremaining: 2.7s\n",
            "17:\tlearn: 0.2120471\ttotal: 1.73s\tremaining: 2.59s\n",
            "18:\tlearn: 0.2020640\ttotal: 1.9s\tremaining: 2.6s\n",
            "19:\tlearn: 0.1912187\ttotal: 2.06s\tremaining: 2.58s\n",
            "20:\tlearn: 0.1813434\ttotal: 2.24s\tremaining: 2.56s\n",
            "21:\tlearn: 0.1731740\ttotal: 2.42s\tremaining: 2.53s\n",
            "22:\tlearn: 0.1642635\ttotal: 2.59s\tremaining: 2.48s\n",
            "23:\tlearn: 0.1558291\ttotal: 2.77s\tremaining: 2.42s\n",
            "24:\tlearn: 0.1486557\ttotal: 2.94s\tremaining: 2.35s\n",
            "25:\tlearn: 0.1417194\ttotal: 3.12s\tremaining: 2.28s\n",
            "26:\tlearn: 0.1345588\ttotal: 3.3s\tremaining: 2.2s\n",
            "27:\tlearn: 0.1297479\ttotal: 3.47s\tremaining: 2.11s\n",
            "28:\tlearn: 0.1251834\ttotal: 3.65s\tremaining: 2.01s\n",
            "29:\tlearn: 0.1208386\ttotal: 3.82s\tremaining: 1.91s\n",
            "30:\tlearn: 0.1171829\ttotal: 4s\tremaining: 1.81s\n",
            "31:\tlearn: 0.1127343\ttotal: 4.19s\tremaining: 1.7s\n",
            "32:\tlearn: 0.1071382\ttotal: 4.32s\tremaining: 1.57s\n",
            "33:\tlearn: 0.1034865\ttotal: 4.5s\tremaining: 1.45s\n",
            "34:\tlearn: 0.0994709\ttotal: 4.67s\tremaining: 1.33s\n",
            "35:\tlearn: 0.0950118\ttotal: 4.84s\tremaining: 1.21s\n",
            "36:\tlearn: 0.0903356\ttotal: 5.03s\tremaining: 1.09s\n",
            "37:\tlearn: 0.0874872\ttotal: 5.18s\tremaining: 955ms\n",
            "38:\tlearn: 0.0830758\ttotal: 5.38s\tremaining: 829ms\n",
            "39:\tlearn: 0.0789231\ttotal: 5.57s\tremaining: 696ms\n",
            "40:\tlearn: 0.0765333\ttotal: 5.77s\tremaining: 563ms\n",
            "41:\tlearn: 0.0739415\ttotal: 5.95s\tremaining: 425ms\n",
            "42:\tlearn: 0.0715488\ttotal: 6.14s\tremaining: 286ms\n",
            "43:\tlearn: 0.0703051\ttotal: 6.33s\tremaining: 144ms\n",
            "44:\tlearn: 0.0680884\ttotal: 6.53s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.6342761\ttotal: 118ms\tremaining: 5.18s\n",
            "1:\tlearn: 0.5784581\ttotal: 212ms\tremaining: 4.56s\n",
            "2:\tlearn: 0.5330828\ttotal: 307ms\tremaining: 4.29s\n",
            "3:\tlearn: 0.4919895\ttotal: 402ms\tremaining: 4.12s\n",
            "4:\tlearn: 0.4570754\ttotal: 485ms\tremaining: 3.88s\n",
            "5:\tlearn: 0.4247802\ttotal: 572ms\tremaining: 3.72s\n",
            "6:\tlearn: 0.4002245\ttotal: 666ms\tremaining: 3.62s\n",
            "7:\tlearn: 0.3763489\ttotal: 753ms\tremaining: 3.48s\n",
            "8:\tlearn: 0.3547118\ttotal: 839ms\tremaining: 3.36s\n",
            "9:\tlearn: 0.3344967\ttotal: 930ms\tremaining: 3.25s\n",
            "10:\tlearn: 0.3160293\ttotal: 1.02s\tremaining: 3.15s\n",
            "11:\tlearn: 0.3001363\ttotal: 1.11s\tremaining: 3.05s\n",
            "12:\tlearn: 0.2819835\ttotal: 1.21s\tremaining: 2.98s\n",
            "13:\tlearn: 0.2647226\ttotal: 1.3s\tremaining: 2.88s\n",
            "14:\tlearn: 0.2499273\ttotal: 1.39s\tremaining: 2.77s\n",
            "15:\tlearn: 0.2344935\ttotal: 1.48s\tremaining: 2.68s\n",
            "16:\tlearn: 0.2214922\ttotal: 1.56s\tremaining: 2.58s\n",
            "17:\tlearn: 0.2087920\ttotal: 1.65s\tremaining: 2.48s\n",
            "18:\tlearn: 0.1975584\ttotal: 1.74s\tremaining: 2.38s\n",
            "19:\tlearn: 0.1868440\ttotal: 1.83s\tremaining: 2.29s\n",
            "20:\tlearn: 0.1775494\ttotal: 1.96s\tremaining: 2.24s\n",
            "21:\tlearn: 0.1675441\ttotal: 2.14s\tremaining: 2.23s\n",
            "22:\tlearn: 0.1589476\ttotal: 2.3s\tremaining: 2.2s\n",
            "23:\tlearn: 0.1516605\ttotal: 2.44s\tremaining: 2.14s\n",
            "24:\tlearn: 0.1443579\ttotal: 2.62s\tremaining: 2.09s\n",
            "25:\tlearn: 0.1383703\ttotal: 2.78s\tremaining: 2.03s\n",
            "26:\tlearn: 0.1326767\ttotal: 2.94s\tremaining: 1.96s\n",
            "27:\tlearn: 0.1272056\ttotal: 3.11s\tremaining: 1.89s\n",
            "28:\tlearn: 0.1211721\ttotal: 3.29s\tremaining: 1.82s\n",
            "29:\tlearn: 0.1162048\ttotal: 3.46s\tremaining: 1.73s\n",
            "30:\tlearn: 0.1102972\ttotal: 3.63s\tremaining: 1.64s\n",
            "31:\tlearn: 0.1068853\ttotal: 3.8s\tremaining: 1.54s\n",
            "32:\tlearn: 0.1023054\ttotal: 3.97s\tremaining: 1.44s\n",
            "33:\tlearn: 0.0979516\ttotal: 4.14s\tremaining: 1.34s\n",
            "34:\tlearn: 0.0939114\ttotal: 4.31s\tremaining: 1.23s\n",
            "35:\tlearn: 0.0904217\ttotal: 4.48s\tremaining: 1.12s\n",
            "36:\tlearn: 0.0872970\ttotal: 4.65s\tremaining: 1s\n",
            "37:\tlearn: 0.0839555\ttotal: 4.82s\tremaining: 889ms\n",
            "38:\tlearn: 0.0808539\ttotal: 4.99s\tremaining: 767ms\n",
            "39:\tlearn: 0.0781879\ttotal: 5.16s\tremaining: 645ms\n",
            "40:\tlearn: 0.0754967\ttotal: 5.31s\tremaining: 518ms\n",
            "41:\tlearn: 0.0732001\ttotal: 5.46s\tremaining: 390ms\n",
            "42:\tlearn: 0.0702325\ttotal: 5.64s\tremaining: 262ms\n",
            "43:\tlearn: 0.0674086\ttotal: 5.81s\tremaining: 132ms\n",
            "44:\tlearn: 0.0645218\ttotal: 5.99s\tremaining: 0us\n",
            "0:\tlearn: 0.6295127\ttotal: 115ms\tremaining: 5.08s\n",
            "1:\tlearn: 0.5702834\ttotal: 205ms\tremaining: 4.4s\n",
            "2:\tlearn: 0.5263581\ttotal: 304ms\tremaining: 4.26s\n",
            "3:\tlearn: 0.4833419\ttotal: 396ms\tremaining: 4.05s\n",
            "4:\tlearn: 0.4477357\ttotal: 482ms\tremaining: 3.85s\n",
            "5:\tlearn: 0.4143164\ttotal: 572ms\tremaining: 3.71s\n",
            "6:\tlearn: 0.3890216\ttotal: 666ms\tremaining: 3.62s\n",
            "7:\tlearn: 0.3681864\ttotal: 759ms\tremaining: 3.51s\n",
            "8:\tlearn: 0.3482952\ttotal: 847ms\tremaining: 3.39s\n",
            "9:\tlearn: 0.3265043\ttotal: 939ms\tremaining: 3.29s\n",
            "10:\tlearn: 0.3096279\ttotal: 1.03s\tremaining: 3.17s\n",
            "11:\tlearn: 0.2910891\ttotal: 1.12s\tremaining: 3.07s\n",
            "12:\tlearn: 0.2749445\ttotal: 1.21s\tremaining: 2.97s\n",
            "13:\tlearn: 0.2606125\ttotal: 1.31s\tremaining: 2.9s\n",
            "14:\tlearn: 0.2446201\ttotal: 1.4s\tremaining: 2.8s\n",
            "15:\tlearn: 0.2304059\ttotal: 1.49s\tremaining: 2.7s\n",
            "16:\tlearn: 0.2177551\ttotal: 1.58s\tremaining: 2.6s\n",
            "17:\tlearn: 0.2065006\ttotal: 1.67s\tremaining: 2.5s\n",
            "18:\tlearn: 0.1947988\ttotal: 1.76s\tremaining: 2.4s\n",
            "19:\tlearn: 0.1844890\ttotal: 1.84s\tremaining: 2.3s\n",
            "20:\tlearn: 0.1745079\ttotal: 1.93s\tremaining: 2.2s\n",
            "21:\tlearn: 0.1660864\ttotal: 2.02s\tremaining: 2.11s\n",
            "22:\tlearn: 0.1580627\ttotal: 2.11s\tremaining: 2.02s\n",
            "23:\tlearn: 0.1509340\ttotal: 2.19s\tremaining: 1.92s\n",
            "24:\tlearn: 0.1442530\ttotal: 2.29s\tremaining: 1.83s\n",
            "25:\tlearn: 0.1370432\ttotal: 2.38s\tremaining: 1.74s\n",
            "26:\tlearn: 0.1309318\ttotal: 2.47s\tremaining: 1.65s\n",
            "27:\tlearn: 0.1245087\ttotal: 2.56s\tremaining: 1.55s\n",
            "28:\tlearn: 0.1192523\ttotal: 2.65s\tremaining: 1.46s\n",
            "29:\tlearn: 0.1150141\ttotal: 2.73s\tremaining: 1.37s\n",
            "30:\tlearn: 0.1096876\ttotal: 2.83s\tremaining: 1.28s\n",
            "31:\tlearn: 0.1049887\ttotal: 2.91s\tremaining: 1.18s\n",
            "32:\tlearn: 0.1001216\ttotal: 3s\tremaining: 1.09s\n",
            "33:\tlearn: 0.0955603\ttotal: 3.09s\tremaining: 999ms\n",
            "34:\tlearn: 0.0914824\ttotal: 3.18s\tremaining: 909ms\n",
            "35:\tlearn: 0.0881581\ttotal: 3.26s\tremaining: 816ms\n",
            "36:\tlearn: 0.0850353\ttotal: 3.37s\tremaining: 728ms\n",
            "37:\tlearn: 0.0820087\ttotal: 3.45s\tremaining: 636ms\n",
            "38:\tlearn: 0.0798092\ttotal: 3.54s\tremaining: 544ms\n",
            "39:\tlearn: 0.0755074\ttotal: 3.63s\tremaining: 454ms\n",
            "40:\tlearn: 0.0726731\ttotal: 3.72s\tremaining: 363ms\n",
            "41:\tlearn: 0.0696069\ttotal: 3.81s\tremaining: 273ms\n",
            "42:\tlearn: 0.0673787\ttotal: 3.9s\tremaining: 182ms\n",
            "43:\tlearn: 0.0650031\ttotal: 3.99s\tremaining: 90.7ms\n",
            "44:\tlearn: 0.0628458\ttotal: 4.08s\tremaining: 0us\n",
            "0:\tlearn: 0.6241292\ttotal: 111ms\tremaining: 4.9s\n",
            "1:\tlearn: 0.5709037\ttotal: 201ms\tremaining: 4.32s\n",
            "2:\tlearn: 0.5254671\ttotal: 288ms\tremaining: 4.04s\n",
            "3:\tlearn: 0.4786113\ttotal: 379ms\tremaining: 3.88s\n",
            "4:\tlearn: 0.4463264\ttotal: 480ms\tremaining: 3.84s\n",
            "5:\tlearn: 0.4170910\ttotal: 567ms\tremaining: 3.68s\n",
            "6:\tlearn: 0.3918466\ttotal: 658ms\tremaining: 3.57s\n",
            "7:\tlearn: 0.3646508\ttotal: 743ms\tremaining: 3.44s\n",
            "8:\tlearn: 0.3459442\ttotal: 830ms\tremaining: 3.32s\n",
            "9:\tlearn: 0.3296159\ttotal: 919ms\tremaining: 3.22s\n",
            "10:\tlearn: 0.3110360\ttotal: 1.01s\tremaining: 3.12s\n",
            "11:\tlearn: 0.2932081\ttotal: 1.09s\tremaining: 3.01s\n",
            "12:\tlearn: 0.2753206\ttotal: 1.19s\tremaining: 2.92s\n",
            "13:\tlearn: 0.2607054\ttotal: 1.28s\tremaining: 2.83s\n",
            "14:\tlearn: 0.2449750\ttotal: 1.36s\tremaining: 2.73s\n",
            "15:\tlearn: 0.2303445\ttotal: 1.47s\tremaining: 2.67s\n",
            "16:\tlearn: 0.2176608\ttotal: 1.56s\tremaining: 2.56s\n",
            "17:\tlearn: 0.2057069\ttotal: 1.64s\tremaining: 2.47s\n",
            "18:\tlearn: 0.1961119\ttotal: 1.73s\tremaining: 2.37s\n",
            "19:\tlearn: 0.1859553\ttotal: 1.82s\tremaining: 2.28s\n",
            "20:\tlearn: 0.1760726\ttotal: 1.91s\tremaining: 2.18s\n",
            "21:\tlearn: 0.1681925\ttotal: 2s\tremaining: 2.09s\n",
            "22:\tlearn: 0.1598949\ttotal: 2.08s\tremaining: 2s\n",
            "23:\tlearn: 0.1515863\ttotal: 2.17s\tremaining: 1.9s\n",
            "24:\tlearn: 0.1446982\ttotal: 2.26s\tremaining: 1.81s\n",
            "25:\tlearn: 0.1375926\ttotal: 2.35s\tremaining: 1.72s\n",
            "26:\tlearn: 0.1309264\ttotal: 2.44s\tremaining: 1.62s\n",
            "27:\tlearn: 0.1256235\ttotal: 2.54s\tremaining: 1.54s\n",
            "28:\tlearn: 0.1190558\ttotal: 2.63s\tremaining: 1.45s\n",
            "29:\tlearn: 0.1135323\ttotal: 2.71s\tremaining: 1.36s\n",
            "30:\tlearn: 0.1089617\ttotal: 2.81s\tremaining: 1.27s\n",
            "31:\tlearn: 0.1046945\ttotal: 2.89s\tremaining: 1.17s\n",
            "32:\tlearn: 0.1009625\ttotal: 2.98s\tremaining: 1.08s\n",
            "33:\tlearn: 0.0974725\ttotal: 3.07s\tremaining: 992ms\n",
            "34:\tlearn: 0.0939969\ttotal: 3.16s\tremaining: 903ms\n",
            "35:\tlearn: 0.0902977\ttotal: 3.25s\tremaining: 812ms\n",
            "36:\tlearn: 0.0864711\ttotal: 3.34s\tremaining: 722ms\n",
            "37:\tlearn: 0.0831782\ttotal: 3.42s\tremaining: 631ms\n",
            "38:\tlearn: 0.0797126\ttotal: 3.52s\tremaining: 542ms\n",
            "39:\tlearn: 0.0770850\ttotal: 3.61s\tremaining: 452ms\n",
            "40:\tlearn: 0.0749211\ttotal: 3.7s\tremaining: 361ms\n",
            "41:\tlearn: 0.0722572\ttotal: 3.79s\tremaining: 271ms\n",
            "42:\tlearn: 0.0695323\ttotal: 3.88s\tremaining: 181ms\n",
            "43:\tlearn: 0.0666975\ttotal: 3.97s\tremaining: 90.2ms\n",
            "44:\tlearn: 0.0648148\ttotal: 4.05s\tremaining: 0us\n",
            "0:\tlearn: 0.6283957\ttotal: 116ms\tremaining: 5.08s\n",
            "1:\tlearn: 0.5720317\ttotal: 205ms\tremaining: 4.4s\n",
            "2:\tlearn: 0.5293804\ttotal: 364ms\tremaining: 5.09s\n",
            "3:\tlearn: 0.4914035\ttotal: 531ms\tremaining: 5.44s\n",
            "4:\tlearn: 0.4553987\ttotal: 713ms\tremaining: 5.7s\n",
            "5:\tlearn: 0.4311846\ttotal: 904ms\tremaining: 5.87s\n",
            "6:\tlearn: 0.4028381\ttotal: 1.07s\tremaining: 5.81s\n",
            "7:\tlearn: 0.3793287\ttotal: 1.24s\tremaining: 5.71s\n",
            "8:\tlearn: 0.3615411\ttotal: 1.41s\tremaining: 5.64s\n",
            "9:\tlearn: 0.3397846\ttotal: 1.58s\tremaining: 5.54s\n",
            "10:\tlearn: 0.3220807\ttotal: 1.74s\tremaining: 5.38s\n",
            "11:\tlearn: 0.3032391\ttotal: 1.91s\tremaining: 5.25s\n",
            "12:\tlearn: 0.2843074\ttotal: 2.08s\tremaining: 5.13s\n",
            "13:\tlearn: 0.2676428\ttotal: 2.24s\tremaining: 4.97s\n",
            "14:\tlearn: 0.2517263\ttotal: 2.42s\tremaining: 4.85s\n",
            "15:\tlearn: 0.2364645\ttotal: 2.59s\tremaining: 4.7s\n",
            "16:\tlearn: 0.2222096\ttotal: 2.76s\tremaining: 4.55s\n",
            "17:\tlearn: 0.2111117\ttotal: 2.93s\tremaining: 4.39s\n",
            "18:\tlearn: 0.2011060\ttotal: 3.1s\tremaining: 4.24s\n",
            "19:\tlearn: 0.1902508\ttotal: 3.27s\tremaining: 4.08s\n",
            "20:\tlearn: 0.1798652\ttotal: 3.45s\tremaining: 3.94s\n",
            "21:\tlearn: 0.1692189\ttotal: 3.64s\tremaining: 3.8s\n",
            "22:\tlearn: 0.1611077\ttotal: 3.8s\tremaining: 3.63s\n",
            "23:\tlearn: 0.1532095\ttotal: 3.98s\tremaining: 3.48s\n",
            "24:\tlearn: 0.1443731\ttotal: 4.16s\tremaining: 3.33s\n",
            "25:\tlearn: 0.1370912\ttotal: 4.34s\tremaining: 3.17s\n",
            "26:\tlearn: 0.1286024\ttotal: 4.53s\tremaining: 3.02s\n",
            "27:\tlearn: 0.1237354\ttotal: 4.68s\tremaining: 2.84s\n",
            "28:\tlearn: 0.1181510\ttotal: 4.87s\tremaining: 2.69s\n",
            "29:\tlearn: 0.1130625\ttotal: 5.06s\tremaining: 2.53s\n",
            "30:\tlearn: 0.1064409\ttotal: 5.25s\tremaining: 2.37s\n",
            "31:\tlearn: 0.1006689\ttotal: 5.39s\tremaining: 2.19s\n",
            "32:\tlearn: 0.0966578\ttotal: 5.49s\tremaining: 2s\n",
            "33:\tlearn: 0.0927705\ttotal: 5.58s\tremaining: 1.8s\n",
            "34:\tlearn: 0.0888239\ttotal: 5.66s\tremaining: 1.62s\n",
            "35:\tlearn: 0.0846610\ttotal: 5.76s\tremaining: 1.44s\n",
            "36:\tlearn: 0.0805170\ttotal: 5.85s\tremaining: 1.26s\n",
            "37:\tlearn: 0.0773903\ttotal: 5.94s\tremaining: 1.09s\n",
            "38:\tlearn: 0.0750563\ttotal: 6.04s\tremaining: 929ms\n",
            "39:\tlearn: 0.0716945\ttotal: 6.13s\tremaining: 766ms\n",
            "40:\tlearn: 0.0688726\ttotal: 6.21s\tremaining: 606ms\n",
            "41:\tlearn: 0.0670660\ttotal: 6.3s\tremaining: 450ms\n",
            "42:\tlearn: 0.0648654\ttotal: 6.39s\tremaining: 297ms\n",
            "43:\tlearn: 0.0624388\ttotal: 6.48s\tremaining: 147ms\n",
            "44:\tlearn: 0.0605147\ttotal: 6.57s\tremaining: 0us\n",
            "0:\tlearn: 0.6227648\ttotal: 115ms\tremaining: 5.07s\n",
            "1:\tlearn: 0.5696488\ttotal: 204ms\tremaining: 4.39s\n",
            "2:\tlearn: 0.5253139\ttotal: 290ms\tremaining: 4.07s\n",
            "3:\tlearn: 0.4838686\ttotal: 379ms\tremaining: 3.88s\n",
            "4:\tlearn: 0.4491332\ttotal: 466ms\tremaining: 3.73s\n",
            "5:\tlearn: 0.4173913\ttotal: 554ms\tremaining: 3.6s\n",
            "6:\tlearn: 0.3934927\ttotal: 651ms\tremaining: 3.53s\n",
            "7:\tlearn: 0.3713052\ttotal: 740ms\tremaining: 3.42s\n",
            "8:\tlearn: 0.3493064\ttotal: 839ms\tremaining: 3.35s\n",
            "9:\tlearn: 0.3273619\ttotal: 929ms\tremaining: 3.25s\n",
            "10:\tlearn: 0.3080215\ttotal: 1.02s\tremaining: 3.15s\n",
            "11:\tlearn: 0.2901536\ttotal: 1.1s\tremaining: 3.04s\n",
            "12:\tlearn: 0.2746605\ttotal: 1.2s\tremaining: 2.95s\n",
            "13:\tlearn: 0.2611282\ttotal: 1.29s\tremaining: 2.85s\n",
            "14:\tlearn: 0.2469616\ttotal: 1.37s\tremaining: 2.74s\n",
            "15:\tlearn: 0.2318621\ttotal: 1.46s\tremaining: 2.65s\n",
            "16:\tlearn: 0.2184597\ttotal: 1.55s\tremaining: 2.55s\n",
            "17:\tlearn: 0.2041259\ttotal: 1.64s\tremaining: 2.46s\n",
            "18:\tlearn: 0.1939341\ttotal: 1.73s\tremaining: 2.37s\n",
            "19:\tlearn: 0.1834672\ttotal: 1.82s\tremaining: 2.28s\n",
            "20:\tlearn: 0.1735983\ttotal: 1.92s\tremaining: 2.19s\n",
            "21:\tlearn: 0.1645075\ttotal: 2.01s\tremaining: 2.1s\n",
            "22:\tlearn: 0.1551441\ttotal: 2.1s\tremaining: 2s\n",
            "23:\tlearn: 0.1459125\ttotal: 2.19s\tremaining: 1.92s\n",
            "24:\tlearn: 0.1377198\ttotal: 2.28s\tremaining: 1.82s\n",
            "25:\tlearn: 0.1316548\ttotal: 2.37s\tremaining: 1.73s\n",
            "26:\tlearn: 0.1251493\ttotal: 2.46s\tremaining: 1.64s\n",
            "27:\tlearn: 0.1191370\ttotal: 2.55s\tremaining: 1.55s\n",
            "28:\tlearn: 0.1133567\ttotal: 2.64s\tremaining: 1.46s\n",
            "29:\tlearn: 0.1083389\ttotal: 2.73s\tremaining: 1.36s\n",
            "30:\tlearn: 0.1037733\ttotal: 2.82s\tremaining: 1.27s\n",
            "31:\tlearn: 0.0994756\ttotal: 2.92s\tremaining: 1.19s\n",
            "32:\tlearn: 0.0959437\ttotal: 3.01s\tremaining: 1.09s\n",
            "33:\tlearn: 0.0921678\ttotal: 3.1s\tremaining: 1s\n",
            "34:\tlearn: 0.0882437\ttotal: 3.19s\tremaining: 912ms\n",
            "35:\tlearn: 0.0846703\ttotal: 3.28s\tremaining: 819ms\n",
            "36:\tlearn: 0.0808786\ttotal: 3.37s\tremaining: 728ms\n",
            "37:\tlearn: 0.0786722\ttotal: 3.45s\tremaining: 636ms\n",
            "38:\tlearn: 0.0762643\ttotal: 3.54s\tremaining: 545ms\n",
            "39:\tlearn: 0.0739475\ttotal: 3.63s\tremaining: 454ms\n",
            "40:\tlearn: 0.0726913\ttotal: 3.72s\tremaining: 363ms\n",
            "41:\tlearn: 0.0692910\ttotal: 3.81s\tremaining: 272ms\n",
            "42:\tlearn: 0.0665234\ttotal: 3.91s\tremaining: 182ms\n",
            "43:\tlearn: 0.0640324\ttotal: 4s\tremaining: 90.9ms\n",
            "44:\tlearn: 0.0620891\ttotal: 4.09s\tremaining: 0us\n",
            "0:\tlearn: 0.6282592\ttotal: 194ms\tremaining: 8.52s\n",
            "1:\tlearn: 0.5779473\ttotal: 373ms\tremaining: 8.03s\n",
            "2:\tlearn: 0.5347119\ttotal: 554ms\tremaining: 7.75s\n",
            "3:\tlearn: 0.4950421\ttotal: 735ms\tremaining: 7.53s\n",
            "4:\tlearn: 0.4630724\ttotal: 921ms\tremaining: 7.37s\n",
            "5:\tlearn: 0.4325316\ttotal: 1.07s\tremaining: 6.94s\n",
            "6:\tlearn: 0.4042332\ttotal: 1.16s\tremaining: 6.3s\n",
            "7:\tlearn: 0.3807794\ttotal: 1.25s\tremaining: 5.79s\n",
            "8:\tlearn: 0.3601381\ttotal: 1.35s\tremaining: 5.42s\n",
            "9:\tlearn: 0.3387016\ttotal: 1.45s\tremaining: 5.07s\n",
            "10:\tlearn: 0.3239559\ttotal: 1.54s\tremaining: 4.77s\n",
            "11:\tlearn: 0.3071077\ttotal: 1.63s\tremaining: 4.48s\n",
            "12:\tlearn: 0.2904816\ttotal: 1.72s\tremaining: 4.25s\n",
            "13:\tlearn: 0.2750966\ttotal: 1.82s\tremaining: 4.03s\n",
            "14:\tlearn: 0.2598388\ttotal: 1.91s\tremaining: 3.82s\n",
            "15:\tlearn: 0.2456211\ttotal: 2s\tremaining: 3.63s\n",
            "16:\tlearn: 0.2315487\ttotal: 2.09s\tremaining: 3.45s\n",
            "17:\tlearn: 0.2177109\ttotal: 2.18s\tremaining: 3.27s\n",
            "18:\tlearn: 0.2065990\ttotal: 2.28s\tremaining: 3.12s\n",
            "19:\tlearn: 0.1966142\ttotal: 2.38s\tremaining: 2.98s\n",
            "20:\tlearn: 0.1868914\ttotal: 2.47s\tremaining: 2.82s\n",
            "21:\tlearn: 0.1782405\ttotal: 2.56s\tremaining: 2.68s\n",
            "22:\tlearn: 0.1690053\ttotal: 2.65s\tremaining: 2.54s\n",
            "23:\tlearn: 0.1602414\ttotal: 2.74s\tremaining: 2.4s\n",
            "24:\tlearn: 0.1529838\ttotal: 2.84s\tremaining: 2.27s\n",
            "25:\tlearn: 0.1469513\ttotal: 2.92s\tremaining: 2.14s\n",
            "26:\tlearn: 0.1397235\ttotal: 3.02s\tremaining: 2.01s\n",
            "27:\tlearn: 0.1343696\ttotal: 3.11s\tremaining: 1.89s\n",
            "28:\tlearn: 0.1284026\ttotal: 3.2s\tremaining: 1.76s\n",
            "29:\tlearn: 0.1228652\ttotal: 3.29s\tremaining: 1.64s\n",
            "30:\tlearn: 0.1182828\ttotal: 3.39s\tremaining: 1.53s\n",
            "31:\tlearn: 0.1132799\ttotal: 3.48s\tremaining: 1.41s\n",
            "32:\tlearn: 0.1083110\ttotal: 3.57s\tremaining: 1.3s\n",
            "33:\tlearn: 0.1036672\ttotal: 3.67s\tremaining: 1.19s\n",
            "34:\tlearn: 0.0992679\ttotal: 3.76s\tremaining: 1.07s\n",
            "35:\tlearn: 0.0963241\ttotal: 3.85s\tremaining: 962ms\n",
            "36:\tlearn: 0.0917169\ttotal: 3.95s\tremaining: 854ms\n",
            "37:\tlearn: 0.0879430\ttotal: 4.04s\tremaining: 744ms\n",
            "38:\tlearn: 0.0846986\ttotal: 4.12s\tremaining: 635ms\n",
            "39:\tlearn: 0.0823523\ttotal: 4.22s\tremaining: 527ms\n",
            "40:\tlearn: 0.0794914\ttotal: 4.31s\tremaining: 420ms\n",
            "41:\tlearn: 0.0767215\ttotal: 4.4s\tremaining: 314ms\n",
            "42:\tlearn: 0.0750068\ttotal: 4.51s\tremaining: 210ms\n",
            "43:\tlearn: 0.0727224\ttotal: 4.6s\tremaining: 105ms\n",
            "44:\tlearn: 0.0698493\ttotal: 4.69s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.6282592\ttotal: 224ms\tremaining: 9.85s\n",
            "1:\tlearn: 0.5779473\ttotal: 402ms\tremaining: 8.65s\n",
            "2:\tlearn: 0.5347119\ttotal: 586ms\tremaining: 8.2s\n",
            "3:\tlearn: 0.4950421\ttotal: 764ms\tremaining: 7.83s\n",
            "4:\tlearn: 0.4630724\ttotal: 948ms\tremaining: 7.58s\n",
            "5:\tlearn: 0.4325316\ttotal: 1.14s\tremaining: 7.4s\n",
            "6:\tlearn: 0.4042332\ttotal: 1.32s\tremaining: 7.2s\n",
            "7:\tlearn: 0.3807794\ttotal: 1.52s\tremaining: 7.05s\n",
            "8:\tlearn: 0.3601381\ttotal: 1.72s\tremaining: 6.9s\n",
            "9:\tlearn: 0.3387016\ttotal: 1.91s\tremaining: 6.7s\n",
            "10:\tlearn: 0.3239559\ttotal: 2.11s\tremaining: 6.54s\n",
            "11:\tlearn: 0.3071077\ttotal: 2.29s\tremaining: 6.3s\n",
            "12:\tlearn: 0.2904816\ttotal: 2.42s\tremaining: 5.96s\n",
            "13:\tlearn: 0.2750966\ttotal: 2.52s\tremaining: 5.58s\n",
            "14:\tlearn: 0.2598388\ttotal: 2.62s\tremaining: 5.23s\n",
            "15:\tlearn: 0.2456211\ttotal: 2.71s\tremaining: 4.92s\n",
            "16:\tlearn: 0.2315487\ttotal: 2.8s\tremaining: 4.61s\n",
            "17:\tlearn: 0.2177109\ttotal: 2.9s\tremaining: 4.34s\n",
            "18:\tlearn: 0.2065990\ttotal: 2.99s\tremaining: 4.09s\n",
            "19:\tlearn: 0.1966142\ttotal: 3.08s\tremaining: 3.85s\n",
            "20:\tlearn: 0.1868914\ttotal: 3.17s\tremaining: 3.62s\n",
            "21:\tlearn: 0.1782405\ttotal: 3.27s\tremaining: 3.42s\n",
            "22:\tlearn: 0.1690053\ttotal: 3.35s\tremaining: 3.21s\n",
            "23:\tlearn: 0.1602414\ttotal: 3.45s\tremaining: 3.02s\n",
            "24:\tlearn: 0.1529838\ttotal: 3.55s\tremaining: 2.84s\n",
            "25:\tlearn: 0.1469513\ttotal: 3.64s\tremaining: 2.66s\n",
            "26:\tlearn: 0.1397235\ttotal: 3.73s\tremaining: 2.49s\n",
            "27:\tlearn: 0.1343696\ttotal: 3.83s\tremaining: 2.32s\n",
            "28:\tlearn: 0.1284026\ttotal: 3.93s\tremaining: 2.17s\n",
            "29:\tlearn: 0.1228652\ttotal: 4.02s\tremaining: 2.01s\n",
            "30:\tlearn: 0.1182828\ttotal: 4.12s\tremaining: 1.86s\n",
            "31:\tlearn: 0.1132799\ttotal: 4.2s\tremaining: 1.71s\n",
            "32:\tlearn: 0.1083110\ttotal: 4.29s\tremaining: 1.56s\n",
            "33:\tlearn: 0.1036672\ttotal: 4.39s\tremaining: 1.42s\n",
            "34:\tlearn: 0.0992679\ttotal: 4.48s\tremaining: 1.28s\n",
            "35:\tlearn: 0.0963241\ttotal: 4.57s\tremaining: 1.14s\n",
            "36:\tlearn: 0.0917169\ttotal: 4.67s\tremaining: 1.01s\n",
            "37:\tlearn: 0.0879430\ttotal: 4.76s\tremaining: 877ms\n",
            "38:\tlearn: 0.0846986\ttotal: 4.85s\tremaining: 746ms\n",
            "39:\tlearn: 0.0823523\ttotal: 4.94s\tremaining: 618ms\n",
            "40:\tlearn: 0.0794914\ttotal: 5.04s\tremaining: 491ms\n",
            "41:\tlearn: 0.0767215\ttotal: 5.13s\tremaining: 366ms\n",
            "42:\tlearn: 0.0750068\ttotal: 5.22s\tremaining: 243ms\n",
            "43:\tlearn: 0.0727224\ttotal: 5.31s\tremaining: 121ms\n",
            "44:\tlearn: 0.0698493\ttotal: 5.4s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.6261597\ttotal: 222ms\tremaining: 9.78s\n",
            "1:\tlearn: 0.5731530\ttotal: 391ms\tremaining: 8.41s\n",
            "2:\tlearn: 0.5299117\ttotal: 581ms\tremaining: 8.13s\n",
            "3:\tlearn: 0.4912047\ttotal: 751ms\tremaining: 7.7s\n",
            "4:\tlearn: 0.4569732\ttotal: 926ms\tremaining: 7.41s\n",
            "5:\tlearn: 0.4260716\ttotal: 1.09s\tremaining: 7.12s\n",
            "6:\tlearn: 0.3990449\ttotal: 1.28s\tremaining: 6.96s\n",
            "7:\tlearn: 0.3763884\ttotal: 1.45s\tremaining: 6.7s\n",
            "8:\tlearn: 0.3539388\ttotal: 1.62s\tremaining: 6.5s\n",
            "9:\tlearn: 0.3321493\ttotal: 1.81s\tremaining: 6.32s\n",
            "10:\tlearn: 0.3163785\ttotal: 2s\tremaining: 6.19s\n",
            "11:\tlearn: 0.2995301\ttotal: 2.18s\tremaining: 5.99s\n",
            "12:\tlearn: 0.2832972\ttotal: 2.36s\tremaining: 5.81s\n",
            "13:\tlearn: 0.2664250\ttotal: 2.53s\tremaining: 5.61s\n",
            "14:\tlearn: 0.2501339\ttotal: 2.72s\tremaining: 5.43s\n",
            "15:\tlearn: 0.2372718\ttotal: 2.89s\tremaining: 5.24s\n",
            "16:\tlearn: 0.2205149\ttotal: 3.07s\tremaining: 5.06s\n",
            "17:\tlearn: 0.2094070\ttotal: 3.24s\tremaining: 4.86s\n",
            "18:\tlearn: 0.1972969\ttotal: 3.39s\tremaining: 4.64s\n",
            "19:\tlearn: 0.1855804\ttotal: 3.48s\tremaining: 4.35s\n",
            "20:\tlearn: 0.1757713\ttotal: 3.57s\tremaining: 4.08s\n",
            "21:\tlearn: 0.1671071\ttotal: 3.68s\tremaining: 3.84s\n",
            "22:\tlearn: 0.1579614\ttotal: 3.77s\tremaining: 3.6s\n",
            "23:\tlearn: 0.1504851\ttotal: 3.86s\tremaining: 3.38s\n",
            "24:\tlearn: 0.1429521\ttotal: 3.95s\tremaining: 3.16s\n",
            "25:\tlearn: 0.1358119\ttotal: 4.04s\tremaining: 2.95s\n",
            "26:\tlearn: 0.1295113\ttotal: 4.12s\tremaining: 2.75s\n",
            "27:\tlearn: 0.1240841\ttotal: 4.21s\tremaining: 2.56s\n",
            "28:\tlearn: 0.1168484\ttotal: 4.3s\tremaining: 2.37s\n",
            "29:\tlearn: 0.1113097\ttotal: 4.39s\tremaining: 2.2s\n",
            "30:\tlearn: 0.1065450\ttotal: 4.49s\tremaining: 2.03s\n",
            "31:\tlearn: 0.1023378\ttotal: 4.57s\tremaining: 1.86s\n",
            "32:\tlearn: 0.0982382\ttotal: 4.66s\tremaining: 1.7s\n",
            "33:\tlearn: 0.0931196\ttotal: 4.77s\tremaining: 1.54s\n",
            "34:\tlearn: 0.0887957\ttotal: 4.86s\tremaining: 1.39s\n",
            "35:\tlearn: 0.0856726\ttotal: 4.95s\tremaining: 1.24s\n",
            "36:\tlearn: 0.0828555\ttotal: 5.04s\tremaining: 1.09s\n",
            "37:\tlearn: 0.0792551\ttotal: 5.14s\tremaining: 946ms\n",
            "38:\tlearn: 0.0760543\ttotal: 5.22s\tremaining: 804ms\n",
            "39:\tlearn: 0.0736421\ttotal: 5.32s\tremaining: 664ms\n",
            "40:\tlearn: 0.0707460\ttotal: 5.4s\tremaining: 527ms\n",
            "41:\tlearn: 0.0684438\ttotal: 5.49s\tremaining: 392ms\n",
            "42:\tlearn: 0.0662465\ttotal: 5.58s\tremaining: 260ms\n",
            "43:\tlearn: 0.0629550\ttotal: 5.67s\tremaining: 129ms\n",
            "44:\tlearn: 0.0612864\ttotal: 5.8s\tremaining: 0us\n",
            "0:\tlearn: 0.6275950\ttotal: 112ms\tremaining: 4.94s\n",
            "1:\tlearn: 0.5744045\ttotal: 200ms\tremaining: 4.31s\n",
            "2:\tlearn: 0.5320283\ttotal: 303ms\tremaining: 4.24s\n",
            "3:\tlearn: 0.4951640\ttotal: 400ms\tremaining: 4.1s\n",
            "4:\tlearn: 0.4619862\ttotal: 485ms\tremaining: 3.88s\n",
            "5:\tlearn: 0.4307052\ttotal: 572ms\tremaining: 3.72s\n",
            "6:\tlearn: 0.4048388\ttotal: 671ms\tremaining: 3.64s\n",
            "7:\tlearn: 0.3784286\ttotal: 758ms\tremaining: 3.51s\n",
            "8:\tlearn: 0.3543528\ttotal: 846ms\tremaining: 3.38s\n",
            "9:\tlearn: 0.3378973\ttotal: 942ms\tremaining: 3.3s\n",
            "10:\tlearn: 0.3187303\ttotal: 1.03s\tremaining: 3.18s\n",
            "11:\tlearn: 0.3005753\ttotal: 1.11s\tremaining: 3.07s\n",
            "12:\tlearn: 0.2844095\ttotal: 1.22s\tremaining: 2.99s\n",
            "13:\tlearn: 0.2685875\ttotal: 1.3s\tremaining: 2.89s\n",
            "14:\tlearn: 0.2536964\ttotal: 1.4s\tremaining: 2.81s\n",
            "15:\tlearn: 0.2395088\ttotal: 1.5s\tremaining: 2.71s\n",
            "16:\tlearn: 0.2258729\ttotal: 1.58s\tremaining: 2.6s\n",
            "17:\tlearn: 0.2134886\ttotal: 1.67s\tremaining: 2.5s\n",
            "18:\tlearn: 0.2020532\ttotal: 1.77s\tremaining: 2.42s\n",
            "19:\tlearn: 0.1908940\ttotal: 1.85s\tremaining: 2.32s\n",
            "20:\tlearn: 0.1818474\ttotal: 1.94s\tremaining: 2.22s\n",
            "21:\tlearn: 0.1724647\ttotal: 2.03s\tremaining: 2.12s\n",
            "22:\tlearn: 0.1630044\ttotal: 2.12s\tremaining: 2.02s\n",
            "23:\tlearn: 0.1562857\ttotal: 2.21s\tremaining: 1.94s\n",
            "24:\tlearn: 0.1501070\ttotal: 2.31s\tremaining: 1.84s\n",
            "25:\tlearn: 0.1435842\ttotal: 2.41s\tremaining: 1.76s\n",
            "26:\tlearn: 0.1368296\ttotal: 2.49s\tremaining: 1.66s\n",
            "27:\tlearn: 0.1303012\ttotal: 2.59s\tremaining: 1.57s\n",
            "28:\tlearn: 0.1241003\ttotal: 2.68s\tremaining: 1.48s\n",
            "29:\tlearn: 0.1182233\ttotal: 2.77s\tremaining: 1.38s\n",
            "30:\tlearn: 0.1131377\ttotal: 2.86s\tremaining: 1.29s\n",
            "31:\tlearn: 0.1087737\ttotal: 2.95s\tremaining: 1.2s\n",
            "32:\tlearn: 0.1052931\ttotal: 3.04s\tremaining: 1.1s\n",
            "33:\tlearn: 0.0995527\ttotal: 3.13s\tremaining: 1.01s\n",
            "34:\tlearn: 0.0955421\ttotal: 3.22s\tremaining: 919ms\n",
            "35:\tlearn: 0.0921123\ttotal: 3.3s\tremaining: 826ms\n",
            "36:\tlearn: 0.0886262\ttotal: 3.41s\tremaining: 737ms\n",
            "37:\tlearn: 0.0851931\ttotal: 3.49s\tremaining: 644ms\n",
            "38:\tlearn: 0.0813143\ttotal: 3.59s\tremaining: 553ms\n",
            "39:\tlearn: 0.0791956\ttotal: 3.68s\tremaining: 461ms\n",
            "40:\tlearn: 0.0759456\ttotal: 3.77s\tremaining: 368ms\n",
            "41:\tlearn: 0.0729461\ttotal: 3.86s\tremaining: 276ms\n",
            "42:\tlearn: 0.0703222\ttotal: 3.95s\tremaining: 184ms\n",
            "43:\tlearn: 0.0677670\ttotal: 4.04s\tremaining: 91.7ms\n",
            "44:\tlearn: 0.0658970\ttotal: 4.12s\tremaining: 0us\n",
            "0:\tlearn: 0.6250771\ttotal: 115ms\tremaining: 5.06s\n",
            "1:\tlearn: 0.5735040\ttotal: 201ms\tremaining: 4.33s\n",
            "2:\tlearn: 0.5283810\ttotal: 287ms\tremaining: 4.01s\n",
            "3:\tlearn: 0.4881796\ttotal: 379ms\tremaining: 3.89s\n",
            "4:\tlearn: 0.4527254\ttotal: 472ms\tremaining: 3.77s\n",
            "5:\tlearn: 0.4259203\ttotal: 558ms\tremaining: 3.62s\n",
            "6:\tlearn: 0.4041709\ttotal: 668ms\tremaining: 3.63s\n",
            "7:\tlearn: 0.3791217\ttotal: 758ms\tremaining: 3.5s\n",
            "8:\tlearn: 0.3565723\ttotal: 844ms\tremaining: 3.38s\n",
            "9:\tlearn: 0.3363047\ttotal: 936ms\tremaining: 3.27s\n",
            "10:\tlearn: 0.3175757\ttotal: 1.02s\tremaining: 3.17s\n",
            "11:\tlearn: 0.3001157\ttotal: 1.11s\tremaining: 3.05s\n",
            "12:\tlearn: 0.2850893\ttotal: 1.2s\tremaining: 2.96s\n",
            "13:\tlearn: 0.2693000\ttotal: 1.29s\tremaining: 2.87s\n",
            "14:\tlearn: 0.2543463\ttotal: 1.38s\tremaining: 2.76s\n",
            "15:\tlearn: 0.2400377\ttotal: 1.48s\tremaining: 2.68s\n",
            "16:\tlearn: 0.2262768\ttotal: 1.56s\tremaining: 2.58s\n",
            "17:\tlearn: 0.2136890\ttotal: 1.67s\tremaining: 2.5s\n",
            "18:\tlearn: 0.2012961\ttotal: 1.76s\tremaining: 2.41s\n",
            "19:\tlearn: 0.1901308\ttotal: 1.85s\tremaining: 2.31s\n",
            "20:\tlearn: 0.1809196\ttotal: 1.93s\tremaining: 2.21s\n",
            "21:\tlearn: 0.1714816\ttotal: 2.04s\tremaining: 2.13s\n",
            "22:\tlearn: 0.1627113\ttotal: 2.2s\tremaining: 2.1s\n",
            "23:\tlearn: 0.1551831\ttotal: 2.36s\tremaining: 2.06s\n",
            "24:\tlearn: 0.1474957\ttotal: 2.51s\tremaining: 2.01s\n",
            "25:\tlearn: 0.1410781\ttotal: 2.69s\tremaining: 1.97s\n",
            "26:\tlearn: 0.1335114\ttotal: 2.86s\tremaining: 1.91s\n",
            "27:\tlearn: 0.1279478\ttotal: 3.03s\tremaining: 1.84s\n",
            "28:\tlearn: 0.1238011\ttotal: 3.19s\tremaining: 1.76s\n",
            "29:\tlearn: 0.1203106\ttotal: 3.36s\tremaining: 1.68s\n",
            "30:\tlearn: 0.1147617\ttotal: 3.53s\tremaining: 1.59s\n",
            "31:\tlearn: 0.1101329\ttotal: 3.7s\tremaining: 1.5s\n",
            "32:\tlearn: 0.1058725\ttotal: 3.87s\tremaining: 1.41s\n",
            "33:\tlearn: 0.1017202\ttotal: 4.04s\tremaining: 1.31s\n",
            "34:\tlearn: 0.0973465\ttotal: 4.21s\tremaining: 1.2s\n",
            "35:\tlearn: 0.0944864\ttotal: 4.39s\tremaining: 1.1s\n",
            "36:\tlearn: 0.0904944\ttotal: 4.56s\tremaining: 986ms\n",
            "37:\tlearn: 0.0877840\ttotal: 4.75s\tremaining: 875ms\n",
            "38:\tlearn: 0.0845886\ttotal: 4.92s\tremaining: 756ms\n",
            "39:\tlearn: 0.0802537\ttotal: 5.1s\tremaining: 637ms\n",
            "40:\tlearn: 0.0762403\ttotal: 5.27s\tremaining: 514ms\n",
            "41:\tlearn: 0.0732714\ttotal: 5.45s\tremaining: 389ms\n",
            "42:\tlearn: 0.0705717\ttotal: 5.62s\tremaining: 262ms\n",
            "43:\tlearn: 0.0679233\ttotal: 5.8s\tremaining: 132ms\n",
            "44:\tlearn: 0.0649926\ttotal: 5.98s\tremaining: 0us\n",
            "0:\tlearn: 0.6270893\ttotal: 119ms\tremaining: 5.26s\n",
            "1:\tlearn: 0.5779320\ttotal: 209ms\tremaining: 4.49s\n",
            "2:\tlearn: 0.5352788\ttotal: 296ms\tremaining: 4.14s\n",
            "3:\tlearn: 0.4944493\ttotal: 391ms\tremaining: 4.01s\n",
            "4:\tlearn: 0.4632488\ttotal: 476ms\tremaining: 3.8s\n",
            "5:\tlearn: 0.4317979\ttotal: 562ms\tremaining: 3.65s\n",
            "6:\tlearn: 0.4048401\ttotal: 653ms\tremaining: 3.54s\n",
            "7:\tlearn: 0.3829823\ttotal: 754ms\tremaining: 3.49s\n",
            "8:\tlearn: 0.3579173\ttotal: 843ms\tremaining: 3.37s\n",
            "9:\tlearn: 0.3349696\ttotal: 935ms\tremaining: 3.27s\n",
            "10:\tlearn: 0.3182181\ttotal: 1.02s\tremaining: 3.16s\n",
            "11:\tlearn: 0.2993975\ttotal: 1.11s\tremaining: 3.05s\n",
            "12:\tlearn: 0.2843388\ttotal: 1.21s\tremaining: 2.97s\n",
            "13:\tlearn: 0.2661978\ttotal: 1.29s\tremaining: 2.87s\n",
            "14:\tlearn: 0.2514586\ttotal: 1.38s\tremaining: 2.76s\n",
            "15:\tlearn: 0.2374528\ttotal: 1.48s\tremaining: 2.68s\n",
            "16:\tlearn: 0.2222674\ttotal: 1.57s\tremaining: 2.59s\n",
            "17:\tlearn: 0.2099242\ttotal: 1.66s\tremaining: 2.48s\n",
            "18:\tlearn: 0.1975750\ttotal: 1.76s\tremaining: 2.41s\n",
            "19:\tlearn: 0.1858967\ttotal: 1.85s\tremaining: 2.31s\n",
            "20:\tlearn: 0.1748979\ttotal: 1.94s\tremaining: 2.22s\n",
            "21:\tlearn: 0.1659423\ttotal: 2.03s\tremaining: 2.13s\n",
            "22:\tlearn: 0.1577118\ttotal: 2.13s\tremaining: 2.03s\n",
            "23:\tlearn: 0.1512926\ttotal: 2.22s\tremaining: 1.94s\n",
            "24:\tlearn: 0.1440209\ttotal: 2.31s\tremaining: 1.85s\n",
            "25:\tlearn: 0.1368937\ttotal: 2.4s\tremaining: 1.75s\n",
            "26:\tlearn: 0.1307871\ttotal: 2.49s\tremaining: 1.66s\n",
            "27:\tlearn: 0.1247522\ttotal: 2.59s\tremaining: 1.57s\n",
            "28:\tlearn: 0.1190389\ttotal: 2.67s\tremaining: 1.47s\n",
            "29:\tlearn: 0.1149755\ttotal: 2.77s\tremaining: 1.38s\n",
            "30:\tlearn: 0.1098711\ttotal: 2.86s\tremaining: 1.29s\n",
            "31:\tlearn: 0.1058786\ttotal: 2.96s\tremaining: 1.2s\n",
            "32:\tlearn: 0.1008847\ttotal: 3.04s\tremaining: 1.11s\n",
            "33:\tlearn: 0.0973176\ttotal: 3.14s\tremaining: 1.01s\n",
            "34:\tlearn: 0.0930341\ttotal: 3.23s\tremaining: 922ms\n",
            "35:\tlearn: 0.0894721\ttotal: 3.31s\tremaining: 829ms\n",
            "36:\tlearn: 0.0867270\ttotal: 3.41s\tremaining: 738ms\n",
            "37:\tlearn: 0.0844048\ttotal: 3.5s\tremaining: 645ms\n",
            "38:\tlearn: 0.0813830\ttotal: 3.59s\tremaining: 552ms\n",
            "39:\tlearn: 0.0785473\ttotal: 3.68s\tremaining: 460ms\n",
            "40:\tlearn: 0.0761165\ttotal: 3.77s\tremaining: 368ms\n",
            "41:\tlearn: 0.0745488\ttotal: 3.87s\tremaining: 276ms\n",
            "42:\tlearn: 0.0718199\ttotal: 3.96s\tremaining: 184ms\n",
            "43:\tlearn: 0.0688736\ttotal: 4.05s\tremaining: 92.2ms\n",
            "44:\tlearn: 0.0665223\ttotal: 4.14s\tremaining: 0us\n",
            "0:\tlearn: 0.6222728\ttotal: 112ms\tremaining: 4.91s\n",
            "1:\tlearn: 0.5694778\ttotal: 201ms\tremaining: 4.32s\n",
            "2:\tlearn: 0.5298908\ttotal: 288ms\tremaining: 4.04s\n",
            "3:\tlearn: 0.4905093\ttotal: 385ms\tremaining: 3.95s\n",
            "4:\tlearn: 0.4573941\ttotal: 477ms\tremaining: 3.82s\n",
            "5:\tlearn: 0.4291362\ttotal: 565ms\tremaining: 3.67s\n",
            "6:\tlearn: 0.3972156\ttotal: 656ms\tremaining: 3.56s\n",
            "7:\tlearn: 0.3777927\ttotal: 744ms\tremaining: 3.44s\n",
            "8:\tlearn: 0.3552171\ttotal: 833ms\tremaining: 3.33s\n",
            "9:\tlearn: 0.3330409\ttotal: 934ms\tremaining: 3.27s\n",
            "10:\tlearn: 0.3160210\ttotal: 1.03s\tremaining: 3.2s\n",
            "11:\tlearn: 0.2994708\ttotal: 1.12s\tremaining: 3.08s\n",
            "12:\tlearn: 0.2833755\ttotal: 1.21s\tremaining: 2.98s\n",
            "13:\tlearn: 0.2660726\ttotal: 1.3s\tremaining: 2.88s\n",
            "14:\tlearn: 0.2477837\ttotal: 1.39s\tremaining: 2.78s\n",
            "15:\tlearn: 0.2338520\ttotal: 1.48s\tremaining: 2.69s\n",
            "16:\tlearn: 0.2209268\ttotal: 1.58s\tremaining: 2.6s\n",
            "17:\tlearn: 0.2062283\ttotal: 1.66s\tremaining: 2.49s\n",
            "18:\tlearn: 0.1953581\ttotal: 1.75s\tremaining: 2.4s\n",
            "19:\tlearn: 0.1849236\ttotal: 1.84s\tremaining: 2.3s\n",
            "20:\tlearn: 0.1751916\ttotal: 1.93s\tremaining: 2.2s\n",
            "21:\tlearn: 0.1659163\ttotal: 2.03s\tremaining: 2.13s\n",
            "22:\tlearn: 0.1589247\ttotal: 2.12s\tremaining: 2.03s\n",
            "23:\tlearn: 0.1505013\ttotal: 2.21s\tremaining: 1.94s\n",
            "24:\tlearn: 0.1432515\ttotal: 2.31s\tremaining: 1.85s\n",
            "25:\tlearn: 0.1366414\ttotal: 2.4s\tremaining: 1.75s\n",
            "26:\tlearn: 0.1302284\ttotal: 2.49s\tremaining: 1.66s\n",
            "27:\tlearn: 0.1252801\ttotal: 2.58s\tremaining: 1.56s\n",
            "28:\tlearn: 0.1189714\ttotal: 2.67s\tremaining: 1.47s\n",
            "29:\tlearn: 0.1138418\ttotal: 2.75s\tremaining: 1.38s\n",
            "30:\tlearn: 0.1089599\ttotal: 2.85s\tremaining: 1.28s\n",
            "31:\tlearn: 0.1054182\ttotal: 2.93s\tremaining: 1.19s\n",
            "32:\tlearn: 0.1025099\ttotal: 3.01s\tremaining: 1.1s\n",
            "33:\tlearn: 0.0990595\ttotal: 3.12s\tremaining: 1.01s\n",
            "34:\tlearn: 0.0941685\ttotal: 3.21s\tremaining: 918ms\n",
            "35:\tlearn: 0.0895057\ttotal: 3.3s\tremaining: 825ms\n",
            "36:\tlearn: 0.0861131\ttotal: 3.39s\tremaining: 734ms\n",
            "37:\tlearn: 0.0836307\ttotal: 3.48s\tremaining: 641ms\n",
            "38:\tlearn: 0.0815645\ttotal: 3.56s\tremaining: 548ms\n",
            "39:\tlearn: 0.0780868\ttotal: 3.66s\tremaining: 457ms\n",
            "40:\tlearn: 0.0753968\ttotal: 3.75s\tremaining: 366ms\n",
            "41:\tlearn: 0.0727903\ttotal: 3.84s\tremaining: 274ms\n",
            "42:\tlearn: 0.0704816\ttotal: 3.93s\tremaining: 183ms\n",
            "43:\tlearn: 0.0679267\ttotal: 4.01s\tremaining: 91.2ms\n",
            "44:\tlearn: 0.0657549\ttotal: 4.11s\tremaining: 0us\n",
            "0:\tlearn: 0.4359268\ttotal: 240ms\tremaining: 10.5s\n",
            "1:\tlearn: 0.3787054\ttotal: 350ms\tremaining: 7.53s\n",
            "2:\tlearn: 0.3233739\ttotal: 461ms\tremaining: 6.45s\n",
            "3:\tlearn: 0.3006004\ttotal: 569ms\tremaining: 5.84s\n",
            "4:\tlearn: 0.2779170\ttotal: 674ms\tremaining: 5.39s\n",
            "5:\tlearn: 0.2621398\ttotal: 766ms\tremaining: 4.97s\n",
            "6:\tlearn: 0.2353035\ttotal: 862ms\tremaining: 4.68s\n",
            "7:\tlearn: 0.2201440\ttotal: 960ms\tremaining: 4.44s\n",
            "8:\tlearn: 0.2093051\ttotal: 1.06s\tremaining: 4.24s\n",
            "9:\tlearn: 0.1953253\ttotal: 1.15s\tremaining: 4.04s\n",
            "10:\tlearn: 0.1853183\ttotal: 1.26s\tremaining: 3.88s\n",
            "11:\tlearn: 0.1743722\ttotal: 1.35s\tremaining: 3.73s\n",
            "12:\tlearn: 0.1613187\ttotal: 1.45s\tremaining: 3.56s\n",
            "13:\tlearn: 0.1505145\ttotal: 1.56s\tremaining: 3.45s\n",
            "14:\tlearn: 0.1420985\ttotal: 1.65s\tremaining: 3.3s\n",
            "15:\tlearn: 0.1321425\ttotal: 1.74s\tremaining: 3.16s\n",
            "16:\tlearn: 0.1237816\ttotal: 1.84s\tremaining: 3.03s\n",
            "17:\tlearn: 0.1142252\ttotal: 1.94s\tremaining: 2.91s\n",
            "18:\tlearn: 0.1069786\ttotal: 2.04s\tremaining: 2.79s\n",
            "19:\tlearn: 0.1025532\ttotal: 2.15s\tremaining: 2.68s\n",
            "20:\tlearn: 0.0932179\ttotal: 2.25s\tremaining: 2.57s\n",
            "21:\tlearn: 0.0876946\ttotal: 2.34s\tremaining: 2.45s\n",
            "22:\tlearn: 0.0834049\ttotal: 2.44s\tremaining: 2.33s\n",
            "23:\tlearn: 0.0800326\ttotal: 2.53s\tremaining: 2.21s\n",
            "24:\tlearn: 0.0762574\ttotal: 2.64s\tremaining: 2.11s\n",
            "25:\tlearn: 0.0713453\ttotal: 2.75s\tremaining: 2.01s\n",
            "26:\tlearn: 0.0669747\ttotal: 2.84s\tremaining: 1.89s\n",
            "27:\tlearn: 0.0629689\ttotal: 2.93s\tremaining: 1.78s\n",
            "28:\tlearn: 0.0594250\ttotal: 3.02s\tremaining: 1.67s\n",
            "29:\tlearn: 0.0565667\ttotal: 3.12s\tremaining: 1.56s\n",
            "30:\tlearn: 0.0525015\ttotal: 3.24s\tremaining: 1.46s\n",
            "31:\tlearn: 0.0482678\ttotal: 3.33s\tremaining: 1.35s\n",
            "32:\tlearn: 0.0466168\ttotal: 3.43s\tremaining: 1.25s\n",
            "33:\tlearn: 0.0431695\ttotal: 3.53s\tremaining: 1.14s\n",
            "34:\tlearn: 0.0414321\ttotal: 3.64s\tremaining: 1.04s\n",
            "35:\tlearn: 0.0396105\ttotal: 3.74s\tremaining: 935ms\n",
            "36:\tlearn: 0.0373610\ttotal: 3.83s\tremaining: 829ms\n",
            "37:\tlearn: 0.0348650\ttotal: 3.93s\tremaining: 724ms\n",
            "38:\tlearn: 0.0340569\ttotal: 4.02s\tremaining: 619ms\n",
            "39:\tlearn: 0.0324655\ttotal: 4.11s\tremaining: 514ms\n",
            "40:\tlearn: 0.0306445\ttotal: 4.21s\tremaining: 411ms\n",
            "41:\tlearn: 0.0292179\ttotal: 4.33s\tremaining: 309ms\n",
            "42:\tlearn: 0.0282901\ttotal: 4.42s\tremaining: 205ms\n",
            "43:\tlearn: 0.0270630\ttotal: 4.51s\tremaining: 103ms\n",
            "44:\tlearn: 0.0260518\ttotal: 4.62s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0:\tlearn: 0.4359268\ttotal: 137ms\tremaining: 6.02s\n",
            "1:\tlearn: 0.3787054\ttotal: 237ms\tremaining: 5.1s\n",
            "2:\tlearn: 0.3233739\ttotal: 354ms\tremaining: 4.96s\n",
            "3:\tlearn: 0.3006004\ttotal: 456ms\tremaining: 4.67s\n",
            "4:\tlearn: 0.2779170\ttotal: 555ms\tremaining: 4.44s\n",
            "5:\tlearn: 0.2621398\ttotal: 654ms\tremaining: 4.25s\n",
            "6:\tlearn: 0.2353035\ttotal: 752ms\tremaining: 4.08s\n",
            "7:\tlearn: 0.2201440\ttotal: 845ms\tremaining: 3.9s\n",
            "8:\tlearn: 0.2093051\ttotal: 945ms\tremaining: 3.78s\n",
            "9:\tlearn: 0.1953253\ttotal: 1.04s\tremaining: 3.66s\n",
            "10:\tlearn: 0.1853183\ttotal: 1.14s\tremaining: 3.51s\n",
            "11:\tlearn: 0.1743722\ttotal: 1.24s\tremaining: 3.41s\n",
            "12:\tlearn: 0.1613187\ttotal: 1.33s\tremaining: 3.28s\n",
            "13:\tlearn: 0.1505145\ttotal: 1.44s\tremaining: 3.19s\n",
            "14:\tlearn: 0.1420985\ttotal: 1.54s\tremaining: 3.08s\n",
            "15:\tlearn: 0.1321425\ttotal: 1.63s\tremaining: 2.96s\n",
            "16:\tlearn: 0.1237816\ttotal: 1.73s\tremaining: 2.85s\n",
            "17:\tlearn: 0.1142252\ttotal: 1.83s\tremaining: 2.75s\n",
            "18:\tlearn: 0.1069786\ttotal: 1.93s\tremaining: 2.64s\n",
            "19:\tlearn: 0.1025532\ttotal: 2.03s\tremaining: 2.54s\n",
            "20:\tlearn: 0.0932179\ttotal: 2.15s\tremaining: 2.46s\n",
            "21:\tlearn: 0.0876946\ttotal: 2.32s\tremaining: 2.43s\n",
            "22:\tlearn: 0.0834049\ttotal: 2.48s\tremaining: 2.37s\n",
            "23:\tlearn: 0.0800326\ttotal: 2.65s\tremaining: 2.32s\n",
            "24:\tlearn: 0.0762574\ttotal: 2.85s\tremaining: 2.28s\n",
            "25:\tlearn: 0.0713453\ttotal: 3.04s\tremaining: 2.22s\n",
            "26:\tlearn: 0.0669747\ttotal: 3.22s\tremaining: 2.15s\n",
            "27:\tlearn: 0.0629689\ttotal: 3.39s\tremaining: 2.06s\n",
            "28:\tlearn: 0.0594250\ttotal: 3.59s\tremaining: 1.98s\n",
            "29:\tlearn: 0.0565667\ttotal: 3.78s\tremaining: 1.89s\n",
            "30:\tlearn: 0.0525015\ttotal: 3.98s\tremaining: 1.8s\n",
            "31:\tlearn: 0.0482678\ttotal: 4.17s\tremaining: 1.69s\n",
            "32:\tlearn: 0.0466168\ttotal: 4.36s\tremaining: 1.58s\n",
            "33:\tlearn: 0.0431695\ttotal: 4.55s\tremaining: 1.47s\n",
            "34:\tlearn: 0.0414321\ttotal: 4.72s\tremaining: 1.35s\n",
            "35:\tlearn: 0.0396105\ttotal: 4.92s\tremaining: 1.23s\n",
            "36:\tlearn: 0.0373610\ttotal: 5.1s\tremaining: 1.1s\n",
            "37:\tlearn: 0.0348650\ttotal: 5.3s\tremaining: 976ms\n",
            "38:\tlearn: 0.0340569\ttotal: 5.47s\tremaining: 842ms\n",
            "39:\tlearn: 0.0324655\ttotal: 5.67s\tremaining: 709ms\n",
            "40:\tlearn: 0.0306445\ttotal: 5.87s\tremaining: 573ms\n",
            "41:\tlearn: 0.0292179\ttotal: 6.07s\tremaining: 434ms\n",
            "42:\tlearn: 0.0282901\ttotal: 6.26s\tremaining: 291ms\n",
            "43:\tlearn: 0.0270630\ttotal: 6.46s\tremaining: 147ms\n",
            "44:\tlearn: 0.0260518\ttotal: 6.66s\tremaining: 0us\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py:1395: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
            "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 0.4563075\ttotal: 237ms\tremaining: 10.4s\n",
            "1:\tlearn: 0.3867462\ttotal: 435ms\tremaining: 9.35s\n",
            "2:\tlearn: 0.3354584\ttotal: 635ms\tremaining: 8.88s\n",
            "3:\tlearn: 0.3072429\ttotal: 817ms\tremaining: 8.38s\n",
            "4:\tlearn: 0.2848135\ttotal: 1.01s\tremaining: 8.05s\n",
            "5:\tlearn: 0.2628593\ttotal: 1.19s\tremaining: 7.74s\n",
            "6:\tlearn: 0.2427231\ttotal: 1.39s\tremaining: 7.55s\n",
            "7:\tlearn: 0.2279253\ttotal: 1.55s\tremaining: 7.19s\n",
            "8:\tlearn: 0.2137429\ttotal: 1.74s\tremaining: 6.96s\n",
            "9:\tlearn: 0.2006978\ttotal: 1.92s\tremaining: 6.71s\n",
            "10:\tlearn: 0.1856306\ttotal: 2.1s\tremaining: 6.48s\n",
            "11:\tlearn: 0.1730747\ttotal: 2.27s\tremaining: 6.25s\n",
            "12:\tlearn: 0.1625800\ttotal: 2.46s\tremaining: 6.06s\n",
            "13:\tlearn: 0.1473523\ttotal: 2.62s\tremaining: 5.81s\n",
            "14:\tlearn: 0.1391749\ttotal: 2.8s\tremaining: 5.61s\n",
            "15:\tlearn: 0.1304303\ttotal: 2.99s\tremaining: 5.41s\n",
            "16:\tlearn: 0.1208072\ttotal: 3.18s\tremaining: 5.24s\n",
            "17:\tlearn: 0.1108075\ttotal: 3.37s\tremaining: 5.05s\n",
            "18:\tlearn: 0.1032414\ttotal: 3.52s\tremaining: 4.82s\n",
            "19:\tlearn: 0.0982584\ttotal: 3.69s\tremaining: 4.61s\n",
            "20:\tlearn: 0.0923619\ttotal: 3.87s\tremaining: 4.42s\n",
            "21:\tlearn: 0.0886673\ttotal: 4.05s\tremaining: 4.24s\n",
            "22:\tlearn: 0.0817762\ttotal: 4.25s\tremaining: 4.06s\n",
            "23:\tlearn: 0.0753438\ttotal: 4.43s\tremaining: 3.88s\n",
            "24:\tlearn: 0.0712000\ttotal: 4.63s\tremaining: 3.7s\n",
            "25:\tlearn: 0.0672473\ttotal: 4.82s\tremaining: 3.52s\n",
            "26:\tlearn: 0.0617396\ttotal: 5.01s\tremaining: 3.34s\n",
            "27:\tlearn: 0.0582538\ttotal: 5.12s\tremaining: 3.11s\n",
            "28:\tlearn: 0.0559806\ttotal: 5.21s\tremaining: 2.87s\n",
            "29:\tlearn: 0.0535341\ttotal: 5.3s\tremaining: 2.65s\n",
            "30:\tlearn: 0.0503487\ttotal: 5.39s\tremaining: 2.44s\n",
            "31:\tlearn: 0.0471912\ttotal: 5.49s\tremaining: 2.23s\n",
            "32:\tlearn: 0.0446681\ttotal: 5.58s\tremaining: 2.03s\n",
            "33:\tlearn: 0.0426013\ttotal: 5.69s\tremaining: 1.84s\n",
            "34:\tlearn: 0.0404417\ttotal: 5.78s\tremaining: 1.65s\n",
            "35:\tlearn: 0.0385159\ttotal: 5.88s\tremaining: 1.47s\n",
            "36:\tlearn: 0.0356808\ttotal: 5.97s\tremaining: 1.29s\n",
            "37:\tlearn: 0.0341517\ttotal: 6.06s\tremaining: 1.12s\n",
            "38:\tlearn: 0.0327662\ttotal: 6.15s\tremaining: 947ms\n",
            "39:\tlearn: 0.0311687\ttotal: 6.24s\tremaining: 780ms\n",
            "40:\tlearn: 0.0294042\ttotal: 6.33s\tremaining: 617ms\n",
            "41:\tlearn: 0.0282841\ttotal: 6.42s\tremaining: 459ms\n",
            "42:\tlearn: 0.0272606\ttotal: 6.51s\tremaining: 303ms\n",
            "43:\tlearn: 0.0260292\ttotal: 6.61s\tremaining: 150ms\n",
            "44:\tlearn: 0.0248846\ttotal: 6.72s\tremaining: 0us\n",
            "0:\tlearn: 0.4440118\ttotal: 119ms\tremaining: 5.22s\n",
            "1:\tlearn: 0.3732512\ttotal: 212ms\tremaining: 4.57s\n",
            "2:\tlearn: 0.3371120\ttotal: 318ms\tremaining: 4.45s\n",
            "3:\tlearn: 0.3007372\ttotal: 420ms\tremaining: 4.31s\n",
            "4:\tlearn: 0.2775797\ttotal: 513ms\tremaining: 4.11s\n",
            "5:\tlearn: 0.2599026\ttotal: 600ms\tremaining: 3.9s\n",
            "6:\tlearn: 0.2379685\ttotal: 700ms\tremaining: 3.8s\n",
            "7:\tlearn: 0.2204133\ttotal: 792ms\tremaining: 3.66s\n",
            "8:\tlearn: 0.2075348\ttotal: 888ms\tremaining: 3.55s\n",
            "9:\tlearn: 0.1939613\ttotal: 995ms\tremaining: 3.48s\n",
            "10:\tlearn: 0.1840314\ttotal: 1.09s\tremaining: 3.36s\n",
            "11:\tlearn: 0.1706007\ttotal: 1.18s\tremaining: 3.25s\n",
            "12:\tlearn: 0.1619808\ttotal: 1.28s\tremaining: 3.14s\n",
            "13:\tlearn: 0.1480031\ttotal: 1.38s\tremaining: 3.06s\n",
            "14:\tlearn: 0.1400556\ttotal: 1.47s\tremaining: 2.94s\n",
            "15:\tlearn: 0.1283270\ttotal: 1.57s\tremaining: 2.85s\n",
            "16:\tlearn: 0.1198333\ttotal: 1.66s\tremaining: 2.74s\n",
            "17:\tlearn: 0.1111759\ttotal: 1.75s\tremaining: 2.63s\n",
            "18:\tlearn: 0.1038981\ttotal: 1.85s\tremaining: 2.53s\n",
            "19:\tlearn: 0.0957815\ttotal: 1.94s\tremaining: 2.43s\n",
            "20:\tlearn: 0.0897118\ttotal: 2.04s\tremaining: 2.33s\n",
            "21:\tlearn: 0.0848962\ttotal: 2.13s\tremaining: 2.23s\n",
            "22:\tlearn: 0.0803462\ttotal: 2.23s\tremaining: 2.13s\n",
            "23:\tlearn: 0.0753200\ttotal: 2.32s\tremaining: 2.03s\n",
            "24:\tlearn: 0.0700125\ttotal: 2.43s\tremaining: 1.94s\n",
            "25:\tlearn: 0.0643534\ttotal: 2.52s\tremaining: 1.84s\n",
            "26:\tlearn: 0.0603312\ttotal: 2.61s\tremaining: 1.74s\n",
            "27:\tlearn: 0.0559145\ttotal: 2.72s\tremaining: 1.65s\n",
            "28:\tlearn: 0.0539440\ttotal: 2.8s\tremaining: 1.55s\n",
            "29:\tlearn: 0.0517267\ttotal: 2.89s\tremaining: 1.45s\n",
            "30:\tlearn: 0.0482052\ttotal: 2.99s\tremaining: 1.35s\n",
            "31:\tlearn: 0.0459425\ttotal: 3.09s\tremaining: 1.25s\n",
            "32:\tlearn: 0.0439619\ttotal: 3.18s\tremaining: 1.16s\n",
            "33:\tlearn: 0.0417688\ttotal: 3.27s\tremaining: 1.06s\n",
            "34:\tlearn: 0.0401093\ttotal: 3.37s\tremaining: 964ms\n",
            "35:\tlearn: 0.0385904\ttotal: 3.46s\tremaining: 865ms\n",
            "36:\tlearn: 0.0360022\ttotal: 3.56s\tremaining: 770ms\n",
            "37:\tlearn: 0.0338892\ttotal: 3.65s\tremaining: 673ms\n",
            "38:\tlearn: 0.0324233\ttotal: 3.74s\tremaining: 576ms\n",
            "39:\tlearn: 0.0312157\ttotal: 3.84s\tremaining: 480ms\n",
            "40:\tlearn: 0.0291814\ttotal: 3.93s\tremaining: 383ms\n",
            "41:\tlearn: 0.0278416\ttotal: 4.03s\tremaining: 288ms\n",
            "42:\tlearn: 0.0269807\ttotal: 4.12s\tremaining: 192ms\n",
            "43:\tlearn: 0.0257980\ttotal: 4.21s\tremaining: 95.6ms\n",
            "44:\tlearn: 0.0245350\ttotal: 4.3s\tremaining: 0us\n",
            "0:\tlearn: 0.4299407\ttotal: 144ms\tremaining: 6.33s\n",
            "1:\tlearn: 0.3598609\ttotal: 241ms\tremaining: 5.18s\n",
            "2:\tlearn: 0.3151293\ttotal: 333ms\tremaining: 4.67s\n",
            "3:\tlearn: 0.2782853\ttotal: 445ms\tremaining: 4.56s\n",
            "4:\tlearn: 0.2581975\ttotal: 542ms\tremaining: 4.34s\n",
            "5:\tlearn: 0.2406854\ttotal: 641ms\tremaining: 4.16s\n",
            "6:\tlearn: 0.2204427\ttotal: 740ms\tremaining: 4.02s\n",
            "7:\tlearn: 0.2059235\ttotal: 830ms\tremaining: 3.84s\n",
            "8:\tlearn: 0.1950133\ttotal: 923ms\tremaining: 3.69s\n",
            "9:\tlearn: 0.1861295\ttotal: 1.02s\tremaining: 3.58s\n",
            "10:\tlearn: 0.1742947\ttotal: 1.12s\tremaining: 3.46s\n",
            "11:\tlearn: 0.1620548\ttotal: 1.21s\tremaining: 3.33s\n",
            "12:\tlearn: 0.1511504\ttotal: 1.31s\tremaining: 3.23s\n",
            "13:\tlearn: 0.1401442\ttotal: 1.41s\tremaining: 3.11s\n",
            "14:\tlearn: 0.1291975\ttotal: 1.51s\tremaining: 3.02s\n",
            "15:\tlearn: 0.1186027\ttotal: 1.61s\tremaining: 2.92s\n",
            "16:\tlearn: 0.1109809\ttotal: 1.7s\tremaining: 2.8s\n",
            "17:\tlearn: 0.1053202\ttotal: 1.79s\tremaining: 2.69s\n",
            "18:\tlearn: 0.0953270\ttotal: 1.89s\tremaining: 2.58s\n",
            "19:\tlearn: 0.0901493\ttotal: 1.98s\tremaining: 2.47s\n",
            "20:\tlearn: 0.0823351\ttotal: 2.08s\tremaining: 2.37s\n",
            "21:\tlearn: 0.0788112\ttotal: 2.18s\tremaining: 2.27s\n",
            "22:\tlearn: 0.0717064\ttotal: 2.27s\tremaining: 2.17s\n",
            "23:\tlearn: 0.0680148\ttotal: 2.36s\tremaining: 2.06s\n",
            "24:\tlearn: 0.0624230\ttotal: 2.46s\tremaining: 1.97s\n",
            "25:\tlearn: 0.0576313\ttotal: 2.56s\tremaining: 1.87s\n",
            "26:\tlearn: 0.0543166\ttotal: 2.66s\tremaining: 1.77s\n",
            "27:\tlearn: 0.0501660\ttotal: 2.84s\tremaining: 1.72s\n",
            "28:\tlearn: 0.0484066\ttotal: 3.02s\tremaining: 1.67s\n",
            "29:\tlearn: 0.0459816\ttotal: 3.19s\tremaining: 1.6s\n",
            "30:\tlearn: 0.0445371\ttotal: 3.37s\tremaining: 1.52s\n",
            "31:\tlearn: 0.0418789\ttotal: 3.56s\tremaining: 1.45s\n",
            "32:\tlearn: 0.0400565\ttotal: 3.74s\tremaining: 1.36s\n",
            "33:\tlearn: 0.0384941\ttotal: 3.92s\tremaining: 1.27s\n",
            "34:\tlearn: 0.0361893\ttotal: 4.09s\tremaining: 1.17s\n",
            "35:\tlearn: 0.0341569\ttotal: 4.29s\tremaining: 1.07s\n",
            "36:\tlearn: 0.0324878\ttotal: 4.46s\tremaining: 966ms\n",
            "37:\tlearn: 0.0310166\ttotal: 4.65s\tremaining: 857ms\n",
            "38:\tlearn: 0.0298093\ttotal: 4.82s\tremaining: 741ms\n",
            "39:\tlearn: 0.0278969\ttotal: 5s\tremaining: 626ms\n",
            "40:\tlearn: 0.0270039\ttotal: 5.18s\tremaining: 506ms\n",
            "41:\tlearn: 0.0256096\ttotal: 5.36s\tremaining: 383ms\n",
            "42:\tlearn: 0.0246454\ttotal: 5.53s\tremaining: 257ms\n",
            "43:\tlearn: 0.0238567\ttotal: 5.7s\tremaining: 130ms\n",
            "44:\tlearn: 0.0218785\ttotal: 5.88s\tremaining: 0us\n",
            "0:\tlearn: 0.4335580\ttotal: 216ms\tremaining: 9.5s\n",
            "1:\tlearn: 0.3737099\ttotal: 410ms\tremaining: 8.82s\n",
            "2:\tlearn: 0.3253263\ttotal: 616ms\tremaining: 8.63s\n",
            "3:\tlearn: 0.2962433\ttotal: 806ms\tremaining: 8.26s\n",
            "4:\tlearn: 0.2719304\ttotal: 913ms\tremaining: 7.3s\n",
            "5:\tlearn: 0.2559058\ttotal: 1.01s\tremaining: 6.54s\n",
            "6:\tlearn: 0.2384262\ttotal: 1.09s\tremaining: 5.95s\n",
            "7:\tlearn: 0.2203471\ttotal: 1.19s\tremaining: 5.52s\n",
            "8:\tlearn: 0.2083161\ttotal: 1.29s\tremaining: 5.16s\n",
            "9:\tlearn: 0.1919977\ttotal: 1.39s\tremaining: 4.88s\n",
            "10:\tlearn: 0.1793126\ttotal: 1.49s\tremaining: 4.61s\n",
            "11:\tlearn: 0.1658073\ttotal: 1.58s\tremaining: 4.36s\n",
            "12:\tlearn: 0.1586135\ttotal: 1.69s\tremaining: 4.16s\n",
            "13:\tlearn: 0.1485734\ttotal: 1.79s\tremaining: 3.96s\n",
            "14:\tlearn: 0.1333390\ttotal: 1.88s\tremaining: 3.76s\n",
            "15:\tlearn: 0.1244600\ttotal: 1.99s\tremaining: 3.6s\n",
            "16:\tlearn: 0.1169034\ttotal: 2.08s\tremaining: 3.43s\n",
            "17:\tlearn: 0.1112386\ttotal: 2.17s\tremaining: 3.25s\n",
            "18:\tlearn: 0.1041804\ttotal: 2.27s\tremaining: 3.1s\n",
            "19:\tlearn: 0.0960477\ttotal: 2.36s\tremaining: 2.95s\n",
            "20:\tlearn: 0.0896394\ttotal: 2.46s\tremaining: 2.81s\n",
            "21:\tlearn: 0.0807541\ttotal: 2.56s\tremaining: 2.67s\n",
            "22:\tlearn: 0.0775263\ttotal: 2.64s\tremaining: 2.53s\n",
            "23:\tlearn: 0.0716628\ttotal: 2.75s\tremaining: 2.4s\n",
            "24:\tlearn: 0.0676024\ttotal: 2.84s\tremaining: 2.27s\n",
            "25:\tlearn: 0.0637609\ttotal: 2.93s\tremaining: 2.14s\n",
            "26:\tlearn: 0.0619440\ttotal: 3.02s\tremaining: 2.01s\n",
            "27:\tlearn: 0.0579611\ttotal: 3.12s\tremaining: 1.9s\n",
            "28:\tlearn: 0.0546850\ttotal: 3.21s\tremaining: 1.77s\n",
            "29:\tlearn: 0.0512884\ttotal: 3.31s\tremaining: 1.65s\n",
            "30:\tlearn: 0.0489025\ttotal: 3.41s\tremaining: 1.54s\n",
            "31:\tlearn: 0.0463606\ttotal: 3.5s\tremaining: 1.42s\n",
            "32:\tlearn: 0.0443417\ttotal: 3.6s\tremaining: 1.31s\n",
            "33:\tlearn: 0.0418806\ttotal: 3.69s\tremaining: 1.19s\n",
            "34:\tlearn: 0.0398719\ttotal: 3.79s\tremaining: 1.08s\n",
            "35:\tlearn: 0.0381002\ttotal: 3.88s\tremaining: 971ms\n",
            "36:\tlearn: 0.0369665\ttotal: 3.98s\tremaining: 861ms\n",
            "37:\tlearn: 0.0358212\ttotal: 4.07s\tremaining: 750ms\n",
            "38:\tlearn: 0.0337264\ttotal: 4.16s\tremaining: 640ms\n",
            "39:\tlearn: 0.0318438\ttotal: 4.26s\tremaining: 533ms\n",
            "40:\tlearn: 0.0304718\ttotal: 4.35s\tremaining: 425ms\n",
            "41:\tlearn: 0.0279855\ttotal: 4.45s\tremaining: 318ms\n",
            "42:\tlearn: 0.0271860\ttotal: 4.54s\tremaining: 211ms\n",
            "43:\tlearn: 0.0259809\ttotal: 4.63s\tremaining: 105ms\n",
            "44:\tlearn: 0.0241621\ttotal: 4.73s\tremaining: 0us\n",
            "0:\tlearn: 0.4473124\ttotal: 117ms\tremaining: 5.16s\n",
            "1:\tlearn: 0.3788496\ttotal: 207ms\tremaining: 4.44s\n",
            "2:\tlearn: 0.3436396\ttotal: 300ms\tremaining: 4.2s\n",
            "3:\tlearn: 0.3139400\ttotal: 413ms\tremaining: 4.24s\n",
            "4:\tlearn: 0.2921385\ttotal: 510ms\tremaining: 4.08s\n",
            "5:\tlearn: 0.2715208\ttotal: 599ms\tremaining: 3.9s\n",
            "6:\tlearn: 0.2538278\ttotal: 694ms\tremaining: 3.77s\n",
            "7:\tlearn: 0.2369716\ttotal: 787ms\tremaining: 3.64s\n",
            "8:\tlearn: 0.2233070\ttotal: 880ms\tremaining: 3.52s\n",
            "9:\tlearn: 0.2100310\ttotal: 982ms\tremaining: 3.44s\n",
            "10:\tlearn: 0.1922650\ttotal: 1.08s\tremaining: 3.33s\n",
            "11:\tlearn: 0.1809847\ttotal: 1.17s\tremaining: 3.21s\n",
            "12:\tlearn: 0.1696860\ttotal: 1.26s\tremaining: 3.12s\n",
            "13:\tlearn: 0.1585201\ttotal: 1.36s\tremaining: 3.01s\n",
            "14:\tlearn: 0.1499997\ttotal: 1.46s\tremaining: 2.91s\n",
            "15:\tlearn: 0.1372589\ttotal: 1.56s\tremaining: 2.82s\n",
            "16:\tlearn: 0.1247319\ttotal: 1.65s\tremaining: 2.72s\n",
            "17:\tlearn: 0.1118161\ttotal: 1.75s\tremaining: 2.62s\n",
            "18:\tlearn: 0.1062397\ttotal: 1.85s\tremaining: 2.53s\n",
            "19:\tlearn: 0.0981615\ttotal: 1.95s\tremaining: 2.43s\n",
            "20:\tlearn: 0.0900461\ttotal: 2.05s\tremaining: 2.35s\n",
            "21:\tlearn: 0.0848927\ttotal: 2.15s\tremaining: 2.25s\n",
            "22:\tlearn: 0.0782225\ttotal: 2.24s\tremaining: 2.14s\n",
            "23:\tlearn: 0.0736149\ttotal: 2.33s\tremaining: 2.04s\n",
            "24:\tlearn: 0.0708272\ttotal: 2.43s\tremaining: 1.95s\n",
            "25:\tlearn: 0.0665553\ttotal: 2.53s\tremaining: 1.85s\n",
            "26:\tlearn: 0.0624929\ttotal: 2.63s\tremaining: 1.75s\n",
            "27:\tlearn: 0.0590205\ttotal: 2.72s\tremaining: 1.65s\n",
            "28:\tlearn: 0.0546345\ttotal: 2.81s\tremaining: 1.55s\n",
            "29:\tlearn: 0.0522377\ttotal: 2.9s\tremaining: 1.45s\n",
            "30:\tlearn: 0.0491271\ttotal: 3s\tremaining: 1.35s\n",
            "31:\tlearn: 0.0468410\ttotal: 3.09s\tremaining: 1.25s\n",
            "32:\tlearn: 0.0428761\ttotal: 3.19s\tremaining: 1.16s\n",
            "33:\tlearn: 0.0412373\ttotal: 3.28s\tremaining: 1.06s\n",
            "34:\tlearn: 0.0394780\ttotal: 3.37s\tremaining: 964ms\n",
            "35:\tlearn: 0.0369019\ttotal: 3.48s\tremaining: 871ms\n",
            "36:\tlearn: 0.0357266\ttotal: 3.58s\tremaining: 773ms\n",
            "37:\tlearn: 0.0333953\ttotal: 3.67s\tremaining: 676ms\n",
            "38:\tlearn: 0.0314895\ttotal: 3.77s\tremaining: 579ms\n",
            "39:\tlearn: 0.0301863\ttotal: 3.86s\tremaining: 482ms\n",
            "40:\tlearn: 0.0282410\ttotal: 3.95s\tremaining: 386ms\n",
            "41:\tlearn: 0.0269064\ttotal: 4.05s\tremaining: 290ms\n",
            "42:\tlearn: 0.0252357\ttotal: 4.15s\tremaining: 193ms\n",
            "43:\tlearn: 0.0241764\ttotal: 4.24s\tremaining: 96.4ms\n",
            "44:\tlearn: 0.0229293\ttotal: 4.34s\tremaining: 0us\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x600 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [9, 6]\n",
        "#plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "ax = plt.GridSpec(2, 2)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "plt.title('A', weight='bold',  fontsize=20, y = 0.90, x=-0.13)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "rfc.fit(X_train1, y_train1)\n",
        "xgb.fit(X_train1, y_train1)\n",
        "cat.fit(X_train1, y_train1)\n",
        "lgb.fit(X_train1, y_train1)\n",
        "Stacking.fit(X_train1, y_train1)\n",
        "\n",
        "pred = cat.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "pred = xgb.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "pred = lgb.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "pred = rfc.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#808000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "pred = Stacking.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#008000\", label=\"StackAFP, AUC=\"+str(auc))\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "plt.title('B', weight='bold',  fontsize=20, y = 0.90, x=-0.13)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "rfc.fit(X_train2, y_train2)\n",
        "xgb.fit(X_train2, y_train2)\n",
        "cat.fit(X_train2, y_train2)\n",
        "lgb.fit(X_train2, y_train2)\n",
        "Stacking.fit(X_train2, y_train2)\n",
        "\n",
        "pred = cat.predict_proba(X_test2)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test2, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test2, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "pred = xgb.predict_proba(X_test2)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test2, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test2, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "pred = lgb.predict_proba(X_test2)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test2, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test2, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "pred = rfc.predict_proba(X_test2)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test2, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test2, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#808000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "pred = Stacking.predict_proba(X_test2)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test2, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test2, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#008000\", label=\"StackAFP, AUC=\"+str(auc))\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "ax1 = plt.subplot(ax[1,0])\n",
        "plt.title('C', weight='bold',  fontsize=20, y = 0.90, x=-0.13)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "rfc.fit(X_train3, y_train3)\n",
        "xgb.fit(X_train3, y_train3)\n",
        "cat.fit(X_train3, y_train3)\n",
        "lgb.fit(X_train3, y_train3)\n",
        "Stacking.fit(X_train3, y_train3)\n",
        "\n",
        "pred = cat.predict_proba(X_test3)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test3, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test3, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "pred = xgb.predict_proba(X_test3)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test3, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test3, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "pred = lgb.predict_proba(X_test3)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test3, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test3, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "pred = rfc.predict_proba(X_test3)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test3, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test3, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#808000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "pred = Stacking.predict_proba(X_test3)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test3, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test3, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#008000\", label=\"StackAFP, AUC=\"+str(auc))\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "ax1 = plt.subplot(ax[1,1])\n",
        "plt.title('D', weight='bold',  fontsize=20, y = 0.90, x=-0.13)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "rfc.fit(X_train4, y_train4)\n",
        "xgb.fit(X_train4, y_train4)\n",
        "cat.fit(X_train4, y_train4)\n",
        "lgb.fit(X_train4, y_train4)\n",
        "Stacking.fit(X_train4, y_train4)\n",
        "\n",
        "pred = cat.predict_proba(X_test4)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test4, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test4, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "pred = xgb.predict_proba(X_test4)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test4, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test4, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "pred = lgb.predict_proba(X_test4)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test4, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test4, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "pred = rfc.predict_proba(X_test4)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test4, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test4, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#808000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "pred = Stacking.predict_proba(X_test4)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test4, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test4, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#008000\", label=\"StackAFP, AUC=\"+str(auc))\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "# ax1 = plt.subplot(ax[1,1])\n",
        "# plt.title('E', weight='bold',  fontsize=15, y = 0.90, x=-0.17)\n",
        "# plt.xticks(weight='bold')\n",
        "# plt.yticks(weight='bold')\n",
        "\n",
        "# rfc.fit(X_train5, y_train5)\n",
        "# xgb.fit(X_train5, y_train5)\n",
        "# cat.fit(X_train5, y_train5)\n",
        "# lgb.fit(X_train5, y_train5)\n",
        "# Stacking.fit(X_train5, y_train5)\n",
        "\n",
        "# pred = cat.predict_proba(X_test5)[:, 1]\n",
        "# fpr, tpr, _ = metrics.roc_curve(y_test5, pred)\n",
        "# auc = round(metrics.roc_auc_score(y_test5, pred), 3)\n",
        "# plt.plot(fpr,tpr, color=\"#800000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "# pred = xgb.predict_proba(X_test5)[:, 1]\n",
        "# fpr, tpr, _ = metrics.roc_curve(y_test5, pred)\n",
        "# auc = round(metrics.roc_auc_score(y_test5, pred), 3)\n",
        "# plt.plot(fpr,tpr, color=\"#FFA500\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "# pred = lgb.predict_proba(X_test5)[:, 1]\n",
        "# fpr, tpr, _ = metrics.roc_curve(y_test5, pred)\n",
        "# auc = round(metrics.roc_auc_score(y_test5, pred), 3)\n",
        "# plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "# pred = rfc.predict_proba(X_test5)[:, 1]\n",
        "# fpr, tpr, _ = metrics.roc_curve(y_test5, pred)\n",
        "# auc = round(metrics.roc_auc_score(y_test5, pred), 3)\n",
        "# plt.plot(fpr,tpr, color=\"#808000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "# pred = Stacking.predict_proba(X_test5)[:, 1]\n",
        "# fpr, tpr, _ = metrics.roc_curve(y_test5, pred)\n",
        "# auc = round(metrics.roc_auc_score(y_test5, pred), 3)\n",
        "# plt.plot(fpr,tpr, color=\"#008000\", label=\"SPPIPred, AUC=\"+str(auc))\n",
        "\n",
        "# plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "# plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "# plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('ROC Curve.png', dpi=800)\n",
        "plt.savefig('ROC Curve.pdf', dpi=800)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = pd.read_csv('/content/Result.csv')"
      ],
      "metadata": {
        "id": "oxuuIg0CxJqm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [3, 3]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax = plt.GridSpec(1, 1)\n",
        "# ax.update(wspace=0.46, hspace=0.17)\n",
        "\n",
        "values_group = result['Accuracy']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['FastText', 'Word2Vec', 'Doc2Vec', 'LSA']\n",
        "colors = ['#7FBCFF', '#FF8207', '#18A218', '#D02D80']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 5] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.8\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "#plt.title('A', x=-0.35, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Score', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('Performance Comparison.png', dpi=1200)\n",
        "# plt.savefig('Performance Comparison.pdf', dpi=800)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "id": "3Hyogy7YLUcy",
        "outputId": "e5b81f22-bdc6-4392-f909-30197457902e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [10, 10]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax = plt.GridSpec(2, 2)\n",
        "ax.update(wspace=0.46, hspace=0.17)\n",
        "\n",
        "#Sodium.........Na..........................\n",
        "\n",
        "values_group = result['Accuracy']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['FastText', 'Word2Vec', 'Doc2Vec', 'LSA']\n",
        "colors = ['#7FBCFF', '#FF8207', '#18A218', '#D02D80']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 5] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.8\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('A', x=-0.35, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Accuracy', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['f1']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['FastText', 'Word2Vec', 'Doc2Vec', 'LSA']\n",
        "colors = ['#7FBCFF', '#FF8207', '#18A218', '#D02D80']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 5] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.8\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('B',  x=-0.37, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('F1-Measure', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['MCC']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['FastText', 'Word2Vec', 'Doc2Vec', 'LSA']\n",
        "colors = ['#7FBCFF', '#FF8207', '#18A218', '#D02D80']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 5] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[1,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.8\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('C',  x=-0.35, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('MCC', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4, title='Feature Extractor', ncol=2, bbox_to_anchor=(1.6,-0.05), frameon=False);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['kappa']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['FastText', 'Word2Vec', 'Doc2Vec', 'LSA']\n",
        "colors = ['#7FBCFF', '#FF8207', '#18A218', '#D02D80']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 5] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[1,1])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.8\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('D', x=-0.37, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Kappa', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "# Show chart\n",
        "plt.tight_layout()\n",
        "plt.savefig('Performance Comparison.png', dpi=800)\n",
        "plt.savefig('Performance Comparison.pdf', dpi=800)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "eNwzAae_xHXn",
        "outputId": "5877efd7-4870-489e-b56e-0b72c78a4b42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-38fac1da740a>:248: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-3-38fac1da740a>:249: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison.png', dpi=800)\n",
            "<ipython-input-3-38fac1da740a>:250: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison.pdf', dpi=800)\n",
            "<ipython-input-3-38fac1da740a>:250: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison.pdf', dpi=800)\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **50 Times Model Results Analysis**"
      ],
      "metadata": {
        "id": "gVJT5E_r3AtJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/total_Metics(LSA_SMOTE_Stack).csv')"
      ],
      "metadata": {
        "id": "z5jO2lDs3HLK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "okX2PNai3UdR",
        "outputId": "367eff7d-01d4-41d0-8022-0161570a16f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Accuracy', 'mcc', 'Kappa', 'precision', 'recall', 'f1'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate mean\n",
        "mean_values = df.mean()\n",
        "\n",
        "# Calculate median\n",
        "median_values = df.median()\n",
        "\n",
        "# Calculate maximum\n",
        "max_values = df.max()\n",
        "\n",
        "# Combine the results into a new DataFrame\n",
        "result_df = pd.DataFrame({'Mean': mean_values, 'Median': median_values, 'Max': max_values})\n",
        "result_df = result_df.transpose()\n",
        "\n",
        "# Save the result DataFrame to a CSV file\n",
        "result_df.to_csv('/content/drive/MyDrive/LSA_Stack.csv', index=True)"
      ],
      "metadata": {
        "id": "FEgGFXk6BS_z"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "TPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
